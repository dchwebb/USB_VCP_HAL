
USB_VCP_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075e0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080077a4  080077a4  000177a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007808  08007808  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08007808  08007808  00017808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007810  08007810  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007810  08007810  00017810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007814  08007814  00017814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08007818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002760  200001f4  08007a0c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002954  08007a0c  00022954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014934  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f6a  00000000  00000000  00034b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  00037ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c20  00000000  00000000  00038850  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024269  00000000  00000000  00039470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dfb9  00000000  00000000  0005d6d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cba75  00000000  00000000  0006b692  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137107  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037bc  00000000  00000000  00137184  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001f4 	.word	0x200001f4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800778c 	.word	0x0800778c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001f8 	.word	0x200001f8
 8000200:	0800778c 	.word	0x0800778c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fa88 	bl	8000a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f808 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f8ba 	bl	8000688 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000514:	f000 f88e 	bl	8000634 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000518:	f006 faf4 	bl	8006b04 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x18>
	...

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b0ac      	sub	sp, #176	; 0xb0
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800052a:	2234      	movs	r2, #52	; 0x34
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f007 f86a 	bl	8007608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	225c      	movs	r2, #92	; 0x5c
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f007 f85b 	bl	8007608 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b35      	ldr	r3, [pc, #212]	; (800062c <SystemClock_Config+0x10c>)
 8000558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055a:	4a34      	ldr	r2, [pc, #208]	; (800062c <SystemClock_Config+0x10c>)
 800055c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000560:	6413      	str	r3, [r2, #64]	; 0x40
 8000562:	4b32      	ldr	r3, [pc, #200]	; (800062c <SystemClock_Config+0x10c>)
 8000564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b2f      	ldr	r3, [pc, #188]	; (8000630 <SystemClock_Config+0x110>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a2e      	ldr	r2, [pc, #184]	; (8000630 <SystemClock_Config+0x110>)
 8000578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <SystemClock_Config+0x110>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058a:	2301      	movs	r3, #1
 800058c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800058e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000592:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005aa:	23a8      	movs	r3, #168	; 0xa8
 80005ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b6:	2307      	movs	r3, #7
 80005b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005bc:	2302      	movs	r3, #2
 80005be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 fd4c 	bl	8003064 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005d2:	f000 f907 	bl	80007e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ec:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005f2:	2105      	movs	r1, #5
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 ff51 	bl	800249c <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000600:	f000 f8f0 	bl	80007e4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000608:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800060a:	2300      	movs	r3, #0
 800060c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4618      	mov	r0, r3
 8000614:	f002 f85c 	bl	80026d0 <HAL_RCCEx_PeriphCLKConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x102>
  {
    Error_Handler();
 800061e:	f000 f8e1 	bl	80007e4 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	37b0      	adds	r7, #176	; 0xb0
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART3_UART_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_USART3_UART_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_USART3_UART_Init+0x4c>)
 8000640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000644:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_USART3_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_USART3_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_USART3_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_USART3_UART_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_USART3_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_USART3_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_USART3_UART_Init+0x4c>)
 800066c:	f002 ff54 	bl	8003518 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000676:	f000 f8b5 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000224 	.word	0x20000224
 8000684:	40004800 	.word	0x40004800

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	; 0x30
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
 80006a2:	4b4b      	ldr	r3, [pc, #300]	; (80007d0 <MX_GPIO_Init+0x148>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a4a      	ldr	r2, [pc, #296]	; (80007d0 <MX_GPIO_Init+0x148>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b48      	ldr	r3, [pc, #288]	; (80007d0 <MX_GPIO_Init+0x148>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	61bb      	str	r3, [r7, #24]
 80006b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
 80006be:	4b44      	ldr	r3, [pc, #272]	; (80007d0 <MX_GPIO_Init+0x148>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a43      	ldr	r2, [pc, #268]	; (80007d0 <MX_GPIO_Init+0x148>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b41      	ldr	r3, [pc, #260]	; (80007d0 <MX_GPIO_Init+0x148>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	4b3d      	ldr	r3, [pc, #244]	; (80007d0 <MX_GPIO_Init+0x148>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a3c      	ldr	r2, [pc, #240]	; (80007d0 <MX_GPIO_Init+0x148>)
 80006e0:	f043 0302 	orr.w	r3, r3, #2
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b3a      	ldr	r3, [pc, #232]	; (80007d0 <MX_GPIO_Init+0x148>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	4b36      	ldr	r3, [pc, #216]	; (80007d0 <MX_GPIO_Init+0x148>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a35      	ldr	r2, [pc, #212]	; (80007d0 <MX_GPIO_Init+0x148>)
 80006fc:	f043 0308 	orr.w	r3, r3, #8
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b33      	ldr	r3, [pc, #204]	; (80007d0 <MX_GPIO_Init+0x148>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0308 	and.w	r3, r3, #8
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b2f      	ldr	r3, [pc, #188]	; (80007d0 <MX_GPIO_Init+0x148>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a2e      	ldr	r2, [pc, #184]	; (80007d0 <MX_GPIO_Init+0x148>)
 8000718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b2c      	ldr	r3, [pc, #176]	; (80007d0 <MX_GPIO_Init+0x148>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <MX_GPIO_Init+0x148>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a27      	ldr	r2, [pc, #156]	; (80007d0 <MX_GPIO_Init+0x148>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <MX_GPIO_Init+0x148>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	f244 0181 	movw	r1, #16513	; 0x4081
 800074c:	4821      	ldr	r0, [pc, #132]	; (80007d4 <MX_GPIO_Init+0x14c>)
 800074e:	f000 fc9d 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2140      	movs	r1, #64	; 0x40
 8000756:	4820      	ldr	r0, [pc, #128]	; (80007d8 <MX_GPIO_Init+0x150>)
 8000758:	f000 fc98 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800075c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_GPIO_Init+0x154>)
 8000764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	481b      	ldr	r0, [pc, #108]	; (80007e0 <MX_GPIO_Init+0x158>)
 8000772:	f000 faf9 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000776:	f244 0381 	movw	r3, #16513	; 0x4081
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	4811      	ldr	r0, [pc, #68]	; (80007d4 <MX_GPIO_Init+0x14c>)
 8000790:	f000 faea 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000794:	2340      	movs	r3, #64	; 0x40
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	480b      	ldr	r0, [pc, #44]	; (80007d8 <MX_GPIO_Init+0x150>)
 80007ac:	f000 fadc 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_GPIO_Init+0x150>)
 80007c4:	f000 fad0 	bl	8000d68 <HAL_GPIO_Init>

}
 80007c8:	bf00      	nop
 80007ca:	3730      	adds	r7, #48	; 0x30
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020400 	.word	0x40020400
 80007d8:	40021800 	.word	0x40021800
 80007dc:	10110000 	.word	0x10110000
 80007e0:	40020800 	.word	0x40020800

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <HAL_MspInit+0x4c>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000808:	6453      	str	r3, [r2, #68]	; 0x44
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <HAL_MspInit+0x4c>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a19      	ldr	r2, [pc, #100]	; (80008c8 <HAL_UART_MspInit+0x84>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d12c      	bne.n	80008c0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <HAL_UART_MspInit+0x88>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <HAL_UART_MspInit+0x88>)
 8000870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <HAL_UART_MspInit+0x88>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <HAL_UART_MspInit+0x88>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a10      	ldr	r2, [pc, #64]	; (80008cc <HAL_UART_MspInit+0x88>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <HAL_UART_MspInit+0x88>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800089e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008b0:	2307      	movs	r3, #7
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <HAL_UART_MspInit+0x8c>)
 80008bc:	f000 fa54 	bl	8000d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40004800 	.word	0x40004800
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020c00 	.word	0x40020c00

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <MemManage_Handler+0x4>

080008ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000928:	f000 f8ca 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <OTG_FS_IRQHandler+0x10>)
 8000936:	f000 fd19 	bl	800136c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20002548 	.word	0x20002548

08000944 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <_sbrk+0x50>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <_sbrk+0x16>
		heap_end = &end;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <_sbrk+0x50>)
 8000956:	4a10      	ldr	r2, [pc, #64]	; (8000998 <_sbrk+0x54>)
 8000958:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <_sbrk+0x50>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <_sbrk+0x50>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4413      	add	r3, r2
 8000968:	466a      	mov	r2, sp
 800096a:	4293      	cmp	r3, r2
 800096c:	d907      	bls.n	800097e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800096e:	f006 fe11 	bl	8007594 <__errno>
 8000972:	4602      	mov	r2, r0
 8000974:	230c      	movs	r3, #12
 8000976:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000978:	f04f 33ff 	mov.w	r3, #4294967295
 800097c:	e006      	b.n	800098c <_sbrk+0x48>
	}

	heap_end += incr;
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <_sbrk+0x50>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	4a03      	ldr	r2, [pc, #12]	; (8000994 <_sbrk+0x50>)
 8000988:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000210 	.word	0x20000210
 8000998:	20002958 	.word	0x20002958

0800099c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <SystemInit+0x28>)
 80009a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a6:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <SystemInit+0x28>)
 80009a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <SystemInit+0x28>)
 80009b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009b6:	609a      	str	r2, [r3, #8]
#endif
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009ce:	e003      	b.n	80009d8 <LoopCopyDataInit>

080009d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009d6:	3104      	adds	r1, #4

080009d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009d8:	480b      	ldr	r0, [pc, #44]	; (8000a08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009e0:	d3f6      	bcc.n	80009d0 <CopyDataInit>
  ldr  r2, =_sbss
 80009e2:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009e4:	e002      	b.n	80009ec <LoopFillZerobss>

080009e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009e8:	f842 3b04 	str.w	r3, [r2], #4

080009ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009f0:	d3f9      	bcc.n	80009e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009f2:	f7ff ffd3 	bl	800099c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f6:	f006 fdd3 	bl	80075a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fa:	f7ff fd83 	bl	8000504 <main>
  bx  lr    
 80009fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a04:	08007818 	.word	0x08007818
  ldr  r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a0c:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8000a10:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8000a14:	20002954 	.word	0x20002954

08000a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC_IRQHandler>
	...

08000a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <HAL_Init+0x40>)
 8000a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_Init+0x40>)
 8000a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_Init+0x40>)
 8000a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f94d 	bl	8000ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f000 f808 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f7ff fed0 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023c00 	.word	0x40023c00

08000a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_InitTick+0x54>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x58>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f965 	bl	8000d4e <HAL_SYSTICK_Config>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00e      	b.n	8000aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d80a      	bhi.n	8000aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f000 f92d 	bl	8000cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa0:	4a06      	ldr	r2, [pc, #24]	; (8000abc <HAL_InitTick+0x5c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000004 	.word	0x20000004

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_IncTick+0x20>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x24>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_IncTick+0x24>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20001074 	.word	0x20001074

08000ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20001074 	.word	0x20001074

08000b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b08:	f7ff ffee 	bl	8000ae8 <HAL_GetTick>
 8000b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b18:	d005      	beq.n	8000b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_Delay+0x40>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4413      	add	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b26:	bf00      	nop
 8000b28:	f7ff ffde 	bl	8000ae8 <HAL_GetTick>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d8f7      	bhi.n	8000b28 <HAL_Delay+0x28>
  {
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000008 	.word	0x20000008

08000b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	60d3      	str	r3, [r2, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	f003 0307 	and.w	r3, r3, #7
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	db0b      	blt.n	8000bd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	f003 021f 	and.w	r2, r3, #31
 8000bc0:	4907      	ldr	r1, [pc, #28]	; (8000be0 <__NVIC_EnableIRQ+0x38>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	095b      	lsrs	r3, r3, #5
 8000bc8:	2001      	movs	r0, #1
 8000bca:	fa00 f202 	lsl.w	r2, r0, r2
 8000bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0a      	blt.n	8000c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	490c      	ldr	r1, [pc, #48]	; (8000c30 <__NVIC_SetPriority+0x4c>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c0c:	e00a      	b.n	8000c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4908      	ldr	r1, [pc, #32]	; (8000c34 <__NVIC_SetPriority+0x50>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	3b04      	subs	r3, #4
 8000c1c:	0112      	lsls	r2, r2, #4
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	440b      	add	r3, r1
 8000c22:	761a      	strb	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f1c3 0307 	rsb	r3, r3, #7
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	bf28      	it	cs
 8000c56:	2304      	movcs	r3, #4
 8000c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d902      	bls.n	8000c68 <NVIC_EncodePriority+0x30>
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3b03      	subs	r3, #3
 8000c66:	e000      	b.n	8000c6a <NVIC_EncodePriority+0x32>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43da      	mvns	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43d9      	mvns	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	4313      	orrs	r3, r2
         );
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3724      	adds	r7, #36	; 0x24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb0:	d301      	bcc.n	8000cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00f      	b.n	8000cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <SysTick_Config+0x40>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cbe:	210f      	movs	r1, #15
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f7ff ff8e 	bl	8000be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <SysTick_Config+0x40>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <SysTick_Config+0x40>)
 8000cd0:	2207      	movs	r2, #7
 8000cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	e000e010 	.word	0xe000e010

08000ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ff29 	bl	8000b44 <__NVIC_SetPriorityGrouping>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d0c:	f7ff ff3e 	bl	8000b8c <__NVIC_GetPriorityGrouping>
 8000d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	6978      	ldr	r0, [r7, #20]
 8000d18:	f7ff ff8e 	bl	8000c38 <NVIC_EncodePriority>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff5d 	bl	8000be4 <__NVIC_SetPriority>
}
 8000d2a:	bf00      	nop
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff31 	bl	8000ba8 <__NVIC_EnableIRQ>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ffa2 	bl	8000ca0 <SysTick_Config>
 8000d5c:	4603      	mov	r3, r0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
 8000d82:	e165      	b.n	8001050 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d84:	2201      	movs	r2, #1
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f040 8154 	bne.w	800104a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d00b      	beq.n	8000dc2 <HAL_GPIO_Init+0x5a>
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d007      	beq.n	8000dc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db6:	2b11      	cmp	r3, #17
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b12      	cmp	r3, #18
 8000dc0:	d130      	bne.n	8000e24 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	091b      	lsrs	r3, r3, #4
 8000e0e:	f003 0201 	and.w	r2, r3, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0xfc>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b12      	cmp	r3, #18
 8000e62:	d123      	bne.n	8000eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	08da      	lsrs	r2, r3, #3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3208      	adds	r2, #8
 8000e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	f003 0307 	and.w	r3, r3, #7
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	220f      	movs	r2, #15
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	691a      	ldr	r2, [r3, #16]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	08da      	lsrs	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	69b9      	ldr	r1, [r7, #24]
 8000ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0203 	and.w	r2, r3, #3
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f000 80ae 	beq.w	800104a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b5c      	ldr	r3, [pc, #368]	; (8001064 <HAL_GPIO_Init+0x2fc>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	4a5b      	ldr	r2, [pc, #364]	; (8001064 <HAL_GPIO_Init+0x2fc>)
 8000ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efc:	6453      	str	r3, [r2, #68]	; 0x44
 8000efe:	4b59      	ldr	r3, [pc, #356]	; (8001064 <HAL_GPIO_Init+0x2fc>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f0a:	4a57      	ldr	r2, [pc, #348]	; (8001068 <HAL_GPIO_Init+0x300>)
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	3302      	adds	r3, #2
 8000f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	220f      	movs	r2, #15
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4e      	ldr	r2, [pc, #312]	; (800106c <HAL_GPIO_Init+0x304>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d025      	beq.n	8000f82 <HAL_GPIO_Init+0x21a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4d      	ldr	r2, [pc, #308]	; (8001070 <HAL_GPIO_Init+0x308>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d01f      	beq.n	8000f7e <HAL_GPIO_Init+0x216>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4c      	ldr	r2, [pc, #304]	; (8001074 <HAL_GPIO_Init+0x30c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d019      	beq.n	8000f7a <HAL_GPIO_Init+0x212>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4b      	ldr	r2, [pc, #300]	; (8001078 <HAL_GPIO_Init+0x310>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_GPIO_Init+0x20e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4a      	ldr	r2, [pc, #296]	; (800107c <HAL_GPIO_Init+0x314>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00d      	beq.n	8000f72 <HAL_GPIO_Init+0x20a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a49      	ldr	r2, [pc, #292]	; (8001080 <HAL_GPIO_Init+0x318>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d007      	beq.n	8000f6e <HAL_GPIO_Init+0x206>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a48      	ldr	r2, [pc, #288]	; (8001084 <HAL_GPIO_Init+0x31c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d101      	bne.n	8000f6a <HAL_GPIO_Init+0x202>
 8000f66:	2306      	movs	r3, #6
 8000f68:	e00c      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	e00a      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f6e:	2305      	movs	r3, #5
 8000f70:	e008      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f72:	2304      	movs	r3, #4
 8000f74:	e006      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f76:	2303      	movs	r3, #3
 8000f78:	e004      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e002      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f82:	2300      	movs	r3, #0
 8000f84:	69fa      	ldr	r2, [r7, #28]
 8000f86:	f002 0203 	and.w	r2, r2, #3
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	4093      	lsls	r3, r2
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f94:	4934      	ldr	r1, [pc, #208]	; (8001068 <HAL_GPIO_Init+0x300>)
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa2:	4b39      	ldr	r3, [pc, #228]	; (8001088 <HAL_GPIO_Init+0x320>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fc6:	4a30      	ldr	r2, [pc, #192]	; (8001088 <HAL_GPIO_Init+0x320>)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fcc:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <HAL_GPIO_Init+0x320>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ff0:	4a25      	ldr	r2, [pc, #148]	; (8001088 <HAL_GPIO_Init+0x320>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <HAL_GPIO_Init+0x320>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800101a:	4a1b      	ldr	r2, [pc, #108]	; (8001088 <HAL_GPIO_Init+0x320>)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_GPIO_Init+0x320>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001044:	4a10      	ldr	r2, [pc, #64]	; (8001088 <HAL_GPIO_Init+0x320>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3301      	adds	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	2b0f      	cmp	r3, #15
 8001054:	f67f ae96 	bls.w	8000d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001058:	bf00      	nop
 800105a:	3724      	adds	r7, #36	; 0x24
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	40023800 	.word	0x40023800
 8001068:	40013800 	.word	0x40013800
 800106c:	40020000 	.word	0x40020000
 8001070:	40020400 	.word	0x40020400
 8001074:	40020800 	.word	0x40020800
 8001078:	40020c00 	.word	0x40020c00
 800107c:	40021000 	.word	0x40021000
 8001080:	40021400 	.word	0x40021400
 8001084:	40021800 	.word	0x40021800
 8001088:	40013c00 	.word	0x40013c00

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010a8:	e003      	b.n	80010b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	041a      	lsls	r2, r3, #16
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	619a      	str	r2, [r3, #24]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c0:	b08f      	sub	sp, #60	; 0x3c
 80010c2:	af0a      	add	r7, sp, #40	; 0x28
 80010c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e116      	b.n	80012fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d106      	bne.n	80010f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f005 fefa 	bl	8006ee4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2203      	movs	r2, #3
 80010f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f002 fee1 	bl	8003ed6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	687e      	ldr	r6, [r7, #4]
 800111c:	466d      	mov	r5, sp
 800111e:	f106 0410 	add.w	r4, r6, #16
 8001122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800112a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800112e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001132:	1d33      	adds	r3, r6, #4
 8001134:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001136:	6838      	ldr	r0, [r7, #0]
 8001138:	f002 fdb8 	bl	8003cac <USB_CoreInit>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d005      	beq.n	800114e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2202      	movs	r2, #2
 8001146:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e0d7      	b.n	80012fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f002 fecf 	bl	8003ef8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	e04a      	b.n	80011f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	1a9b      	subs	r3, r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	333d      	adds	r3, #61	; 0x3d
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	4613      	mov	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	1a9b      	subs	r3, r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	440b      	add	r3, r1
 8001182:	333c      	adds	r3, #60	; 0x3c
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	b298      	uxth	r0, r3
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	1a9b      	subs	r3, r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	3342      	adds	r3, #66	; 0x42
 800119c:	4602      	mov	r2, r0
 800119e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	1a9b      	subs	r3, r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	333f      	adds	r3, #63	; 0x3f
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	1a9b      	subs	r3, r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	3344      	adds	r3, #68	; 0x44
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	1a9b      	subs	r3, r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	3348      	adds	r3, #72	; 0x48
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	1a9b      	subs	r3, r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	3350      	adds	r3, #80	; 0x50
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	3301      	adds	r3, #1
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d3af      	bcc.n	8001160 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e044      	b.n	8001290 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	1a9b      	subs	r3, r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	440b      	add	r3, r1
 8001214:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	1a9b      	subs	r3, r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800122e:	7bfa      	ldrb	r2, [r7, #15]
 8001230:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	1a9b      	subs	r3, r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001248:	7bfa      	ldrb	r2, [r7, #15]
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	1a9b      	subs	r3, r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	1a9b      	subs	r3, r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	440b      	add	r3, r1
 800126c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	3301      	adds	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	429a      	cmp	r2, r3
 8001298:	d3b5      	bcc.n	8001206 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	687e      	ldr	r6, [r7, #4]
 80012a2:	466d      	mov	r5, sp
 80012a4:	f106 0410 	add.w	r4, r6, #16
 80012a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80012b8:	1d33      	adds	r3, r6, #4
 80012ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012bc:	6838      	ldr	r0, [r7, #0]
 80012be:	f002 fe45 	bl	8003f4c <USB_DevInit>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2202      	movs	r2, #2
 80012cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e014      	b.n	80012fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d102      	bne.n	80012f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f001 f8b1 	bl	8002454 <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f003 fe77 	bl	8004fea <USB_DevDisconnect>

  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001306 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b084      	sub	sp, #16
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <HAL_PCD_Start+0x1c>
 800131e:	2302      	movs	r3, #2
 8001320:	e020      	b.n	8001364 <HAL_PCD_Start+0x5e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132e:	2b01      	cmp	r3, #1
 8001330:	d109      	bne.n	8001346 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001336:	2b01      	cmp	r3, #1
 8001338:	d005      	beq.n	8001346 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f003 fe35 	bl	8004fba <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f002 fdad 	bl	8003eb4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_PCD_IRQHandler>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
//static uint16_t usbEventNo = 0;
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b08d      	sub	sp, #52	; 0x34
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	61fb      	str	r3, [r7, #28]
  USB_OTG_EPTypeDef *ep;

  extern uint16_t usbEventNo;
  extern uint32_t usbEvents[300];

  usbEvents[usbEventNo] = USB_OTG_FS->GINTSTS & USB_OTG_FS->GINTMSK;
 800137e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001382:	695a      	ldr	r2, [r3, #20]
 8001384:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	4999      	ldr	r1, [pc, #612]	; (80015f0 <HAL_PCD_IRQHandler+0x284>)
 800138c:	8809      	ldrh	r1, [r1, #0]
 800138e:	4013      	ands	r3, r2
 8001390:	4a98      	ldr	r2, [pc, #608]	; (80015f4 <HAL_PCD_IRQHandler+0x288>)
 8001392:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  if (usbEvents[usbEventNo] != 0x8) {
 8001396:	4b96      	ldr	r3, [pc, #600]	; (80015f0 <HAL_PCD_IRQHandler+0x284>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	4b95      	ldr	r3, [pc, #596]	; (80015f4 <HAL_PCD_IRQHandler+0x288>)
 800139e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a2:	2b08      	cmp	r3, #8
 80013a4:	d005      	beq.n	80013b2 <HAL_PCD_IRQHandler+0x46>
	usbEventNo++;
 80013a6:	4b92      	ldr	r3, [pc, #584]	; (80015f0 <HAL_PCD_IRQHandler+0x284>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b90      	ldr	r3, [pc, #576]	; (80015f0 <HAL_PCD_IRQHandler+0x284>)
 80013b0:	801a      	strh	r2, [r3, #0]


  //usbEventNo++;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 fec2 	bl	8005140 <USB_GetMode>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f040 83ce 	bne.w	8001b60 <HAL_PCD_IRQHandler+0x7f4>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 fe26 	bl	800501a <USB_ReadInterrupts>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 83c4 	beq.w	8001b5e <HAL_PCD_IRQHandler+0x7f2>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 fe1d 	bl	800501a <USB_ReadInterrupts>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d107      	bne.n	80013fa <HAL_PCD_IRQHandler+0x8e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	695a      	ldr	r2, [r3, #20]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f002 0202 	and.w	r2, r2, #2
 80013f8:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 fe0b 	bl	800501a <USB_ReadInterrupts>
 8001404:	4603      	mov	r3, r0
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	2b10      	cmp	r3, #16
 800140c:	d161      	bne.n	80014d2 <HAL_PCD_IRQHandler+0x166>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	699a      	ldr	r2, [r3, #24]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 0210 	bic.w	r2, r2, #16
 800141c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	f003 020f 	and.w	r2, r3, #15
 800142a:	4613      	mov	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	1a9b      	subs	r3, r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	3304      	adds	r3, #4
 800143c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	0c5b      	lsrs	r3, r3, #17
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	2b02      	cmp	r3, #2
 8001448:	d124      	bne.n	8001494 <HAL_PCD_IRQHandler+0x128>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001450:	4013      	ands	r3, r2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d035      	beq.n	80014c2 <HAL_PCD_IRQHandler+0x156>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	091b      	lsrs	r3, r3, #4
 800145e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001460:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001464:	b29b      	uxth	r3, r3
 8001466:	461a      	mov	r2, r3
 8001468:	6a38      	ldr	r0, [r7, #32]
 800146a:	f003 fc83 	bl	8004d74 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800147a:	441a      	add	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	699a      	ldr	r2, [r3, #24]
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	091b      	lsrs	r3, r3, #4
 8001488:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800148c:	441a      	add	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	619a      	str	r2, [r3, #24]
 8001492:	e016      	b.n	80014c2 <HAL_PCD_IRQHandler+0x156>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	0c5b      	lsrs	r3, r3, #17
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	2b06      	cmp	r3, #6
 800149e:	d110      	bne.n	80014c2 <HAL_PCD_IRQHandler+0x156>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80014a6:	2208      	movs	r2, #8
 80014a8:	4619      	mov	r1, r3
 80014aa:	6a38      	ldr	r0, [r7, #32]
 80014ac:	f003 fc62 	bl	8004d74 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	699a      	ldr	r2, [r3, #24]
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014bc:	441a      	add	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	699a      	ldr	r2, [r3, #24]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f042 0210 	orr.w	r2, r2, #16
 80014d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f003 fd9f 	bl	800501a <USB_ReadInterrupts>
 80014dc:	4603      	mov	r3, r0
 80014de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014e6:	d16e      	bne.n	80015c6 <HAL_PCD_IRQHandler+0x25a>
    {
      epnum = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
      //USBD_HandleTypeDef* pd = (USBD_HandleTypeDef*)hpcd->pData;
      //PCD_HandleTypeDef* pd = (PCD_HandleTypeDef*)hpcd->pData;
     // USBD_HandleTypeDef* pd = ((USBD_HandleTypeDef*)hpcd->pData)->request;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f003 fda5 	bl	8005040 <USB_ReadDevAllOutEpInterrupt>
 80014f6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014f8:	e062      	b.n	80015c0 <HAL_PCD_IRQHandler+0x254>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	d057      	beq.n	80015b4 <HAL_PCD_IRQHandler+0x248>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	4611      	mov	r1, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f003 fdca 	bl	80050a8 <USB_ReadDevOutEPInterrupt>
 8001514:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00c      	beq.n	800153a <HAL_PCD_IRQHandler+0x1ce>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	015a      	lsls	r2, r3, #5
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	4413      	add	r3, r2
 8001528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800152c:	461a      	mov	r2, r3
 800152e:	2301      	movs	r3, #1
 8001530:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001532:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 fde3 	bl	8002100 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00c      	beq.n	800155e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	015a      	lsls	r2, r3, #5
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	4413      	add	r3, r2
 800154c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001550:	461a      	mov	r2, r3
 8001552:	2308      	movs	r3, #8
 8001554:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001556:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 fedd 	bl	8002318 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	2b00      	cmp	r3, #0
 8001566:	d008      	beq.n	800157a <HAL_PCD_IRQHandler+0x20e>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	015a      	lsls	r2, r3, #5
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	4413      	add	r3, r2
 8001570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001574:	461a      	mov	r2, r3
 8001576:	2310      	movs	r3, #16
 8001578:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	f003 0320 	and.w	r3, r3, #32
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_PCD_IRQHandler+0x22a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	015a      	lsls	r2, r3, #5
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	4413      	add	r3, r2
 800158c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001590:	461a      	mov	r2, r3
 8001592:	2320      	movs	r3, #32
 8001594:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d009      	beq.n	80015b4 <HAL_PCD_IRQHandler+0x248>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	015a      	lsls	r2, r3, #5
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015ac:	461a      	mov	r2, r3
 80015ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	3301      	adds	r3, #1
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015bc:	085b      	lsrs	r3, r3, #1
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d199      	bne.n	80014fa <HAL_PCD_IRQHandler+0x18e>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 fd25 	bl	800501a <USB_ReadInterrupts>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015da:	f040 80c4 	bne.w	8001766 <HAL_PCD_IRQHandler+0x3fa>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 fd46 	bl	8005074 <USB_ReadDevAllInEpInterrupt>
 80015e8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80015ee:	e0b6      	b.n	800175e <HAL_PCD_IRQHandler+0x3f2>
 80015f0:	20000220 	.word	0x20000220
 80015f4:	20000264 	.word	0x20000264
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80a7 	beq.w	8001752 <HAL_PCD_IRQHandler+0x3e6>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	4611      	mov	r1, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f003 fd68 	bl	80050e4 <USB_ReadDevInEPInterrupt>
 8001614:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d057      	beq.n	80016d0 <HAL_PCD_IRQHandler+0x364>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	2201      	movs	r2, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	43db      	mvns	r3, r3
 800163a:	69f9      	ldr	r1, [r7, #28]
 800163c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001640:	4013      	ands	r3, r2
 8001642:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	015a      	lsls	r2, r3, #5
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	4413      	add	r3, r2
 800164c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001650:	461a      	mov	r2, r3
 8001652:	2301      	movs	r3, #1
 8001654:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d132      	bne.n	80016c4 <HAL_PCD_IRQHandler+0x358>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001662:	4613      	mov	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	1a9b      	subs	r3, r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	440b      	add	r3, r1
 800166c:	3348      	adds	r3, #72	; 0x48
 800166e:	6819      	ldr	r1, [r3, #0]
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001674:	4613      	mov	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	1a9b      	subs	r3, r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4403      	add	r3, r0
 800167e:	3344      	adds	r3, #68	; 0x44
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4419      	add	r1, r3
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4403      	add	r3, r0
 8001692:	3348      	adds	r3, #72	; 0x48
 8001694:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	2b00      	cmp	r3, #0
 800169a:	d113      	bne.n	80016c4 <HAL_PCD_IRQHandler+0x358>
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a0:	4613      	mov	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	1a9b      	subs	r3, r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	3350      	adds	r3, #80	; 0x50
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d108      	bne.n	80016c4 <HAL_PCD_IRQHandler+0x358>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016bc:	461a      	mov	r2, r3
 80016be:	2101      	movs	r1, #1
 80016c0:	f003 fd70 	bl	80051a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	4619      	mov	r1, r3
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f005 fc99 	bl	8007002 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d008      	beq.n	80016ec <HAL_PCD_IRQHandler+0x380>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	015a      	lsls	r2, r3, #5
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	4413      	add	r3, r2
 80016e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e6:	461a      	mov	r2, r3
 80016e8:	2308      	movs	r3, #8
 80016ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d008      	beq.n	8001708 <HAL_PCD_IRQHandler+0x39c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	015a      	lsls	r2, r3, #5
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	4413      	add	r3, r2
 80016fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001702:	461a      	mov	r2, r3
 8001704:	2310      	movs	r3, #16
 8001706:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800170e:	2b00      	cmp	r3, #0
 8001710:	d008      	beq.n	8001724 <HAL_PCD_IRQHandler+0x3b8>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	015a      	lsls	r2, r3, #5
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	4413      	add	r3, r2
 800171a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800171e:	461a      	mov	r2, r3
 8001720:	2340      	movs	r3, #64	; 0x40
 8001722:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d008      	beq.n	8001740 <HAL_PCD_IRQHandler+0x3d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	015a      	lsls	r2, r3, #5
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	4413      	add	r3, r2
 8001736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800173a:	461a      	mov	r2, r3
 800173c:	2302      	movs	r3, #2
 800173e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800174a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fc49 	bl	8001fe4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	3301      	adds	r3, #1
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175a:	085b      	lsrs	r3, r3, #1
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800175e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001760:	2b00      	cmp	r3, #0
 8001762:	f47f af49 	bne.w	80015f8 <HAL_PCD_IRQHandler+0x28c>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f003 fc55 	bl	800501a <USB_ReadInterrupts>
 8001770:	4603      	mov	r3, r0
 8001772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800177a:	d122      	bne.n	80017c2 <HAL_PCD_IRQHandler+0x456>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800178a:	f023 0301 	bic.w	r3, r3, #1
 800178e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001796:	2b01      	cmp	r3, #1
 8001798:	d108      	bne.n	80017ac <HAL_PCD_IRQHandler+0x440>
      {
        hpcd->LPM_State = LPM_L0;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017a2:	2100      	movs	r1, #0
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f005 fe7b 	bl	80074a0 <HAL_PCDEx_LPM_Callback>
 80017aa:	e002      	b.n	80017b2 <HAL_PCD_IRQHandler+0x446>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f005 fc9f 	bl	80070f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80017c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fc27 	bl	800501a <USB_ReadInterrupts>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017d6:	d112      	bne.n	80017fe <HAL_PCD_IRQHandler+0x492>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d102      	bne.n	80017ee <HAL_PCD_IRQHandler+0x482>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f005 fc5b 	bl	80070a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	695a      	ldr	r2, [r3, #20]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017fc:	615a      	str	r2, [r3, #20]
    }
    #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f003 fc09 	bl	800501a <USB_ReadInterrupts>
 8001808:	4603      	mov	r3, r0
 800180a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800180e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001812:	d121      	bne.n	8001858 <HAL_PCD_IRQHandler+0x4ec>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001822:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800182a:	2b00      	cmp	r3, #0
 800182c:	d111      	bne.n	8001852 <HAL_PCD_IRQHandler+0x4e6>
      {
        hpcd->LPM_State = LPM_L1;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	f003 020f 	and.w	r2, r3, #15
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001848:	2101      	movs	r1, #1
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f005 fe28 	bl	80074a0 <HAL_PCDEx_LPM_Callback>
 8001850:	e002      	b.n	8001858 <HAL_PCD_IRQHandler+0x4ec>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f005 fc26 	bl	80070a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f003 fbdc 	bl	800501a <USB_ReadInterrupts>
 8001862:	4603      	mov	r3, r0
 8001864:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800186c:	f040 80c7 	bne.w	80019fe <HAL_PCD_IRQHandler+0x692>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	69fa      	ldr	r2, [r7, #28]
 800187a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800187e:	f023 0301 	bic.w	r3, r3, #1
 8001882:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2110      	movs	r1, #16
 800188a:	4618      	mov	r0, r3
 800188c:	f002 fcbc 	bl	8004208 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001890:	2300      	movs	r3, #0
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001894:	e056      	b.n	8001944 <HAL_PCD_IRQHandler+0x5d8>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001898:	015a      	lsls	r2, r3, #5
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	4413      	add	r3, r2
 800189e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018a2:	461a      	mov	r2, r3
 80018a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ac:	015a      	lsls	r2, r3, #5
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	4413      	add	r3, r2
 80018b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ba:	0151      	lsls	r1, r2, #5
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	440a      	add	r2, r1
 80018c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018c8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80018ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018cc:	015a      	lsls	r2, r3, #5
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018da:	0151      	lsls	r1, r2, #5
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	440a      	add	r2, r1
 80018e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ec:	015a      	lsls	r2, r3, #5
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018f6:	461a      	mov	r2, r3
 80018f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001900:	015a      	lsls	r2, r3, #5
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	4413      	add	r3, r2
 8001906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800190e:	0151      	lsls	r1, r2, #5
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	440a      	add	r2, r1
 8001914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001918:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800191c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800191e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001920:	015a      	lsls	r2, r3, #5
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	4413      	add	r3, r2
 8001926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800192e:	0151      	lsls	r1, r2, #5
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	440a      	add	r2, r1
 8001934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001938:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800193c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001940:	3301      	adds	r3, #1
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800194a:	429a      	cmp	r2, r3
 800194c:	d3a3      	bcc.n	8001896 <HAL_PCD_IRQHandler+0x52a>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800195c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001960:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	2b00      	cmp	r3, #0
 8001968:	d016      	beq.n	8001998 <HAL_PCD_IRQHandler+0x62c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001974:	69fa      	ldr	r2, [r7, #28]
 8001976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800197a:	f043 030b 	orr.w	r3, r3, #11
 800197e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001990:	f043 030b 	orr.w	r3, r3, #11
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	e015      	b.n	80019c4 <HAL_PCD_IRQHandler+0x658>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019aa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019be:	f043 030b 	orr.w	r3, r3, #11
 80019c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019e8:	461a      	mov	r2, r3
 80019ea:	f003 fbdb 	bl	80051a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695a      	ldr	r2, [r3, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f003 fb09 	bl	800501a <USB_ReadInterrupts>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a12:	d124      	bne.n	8001a5e <HAL_PCD_IRQHandler+0x6f2>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 fb9f 	bl	800515c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f002 fc51 	bl	80042ca <USB_GetDevSpeed>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681c      	ldr	r4, [r3, #0]
 8001a34:	f000 fe18 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 8001a38:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	461a      	mov	r2, r3
 8001a42:	4620      	mov	r0, r4
 8001a44:	f002 f994 	bl	8003d70 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f005 fb02 	bl	8007052 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 fad9 	bl	800501a <USB_ReadInterrupts>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d10a      	bne.n	8001a88 <HAL_PCD_IRQHandler+0x71c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f005 fadf 	bl	8007036 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f002 0208 	and.w	r2, r2, #8
 8001a86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f003 fac4 	bl	800501a <USB_ReadInterrupts>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a9c:	d10f      	bne.n	8001abe <HAL_PCD_IRQHandler+0x752>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f005 fb41 	bl	8007130 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f003 faa9 	bl	800501a <USB_ReadInterrupts>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ace:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ad2:	d10f      	bne.n	8001af4 <HAL_PCD_IRQHandler+0x788>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	4619      	mov	r1, r3
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f005 fb14 	bl	800710c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 fa8e 	bl	800501a <USB_ReadInterrupts>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b08:	d10a      	bne.n	8001b20 <HAL_PCD_IRQHandler+0x7b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f005 fb22 	bl	8007154 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 fa78 	bl	800501a <USB_ReadInterrupts>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d115      	bne.n	8001b60 <HAL_PCD_IRQHandler+0x7f4>
    {
      temp = hpcd->Instance->GOTGINT;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <HAL_PCD_IRQHandler+0x7e0>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f005 fb12 	bl	8007170 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6859      	ldr	r1, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	e000      	b.n	8001b60 <HAL_PCD_IRQHandler+0x7f4>
      return;
 8001b5e:	bf00      	nop
    }
  }
}
 8001b60:	3734      	adds	r7, #52	; 0x34
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd90      	pop	{r4, r7, pc}
 8001b66:	bf00      	nop

08001b68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_PCD_SetAddress+0x1a>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e013      	b.n	8001baa <HAL_PCD_SetAddress+0x42>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	78fa      	ldrb	r2, [r7, #3]
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 f9e7 	bl	8004f6e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b084      	sub	sp, #16
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	4608      	mov	r0, r1
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	70fb      	strb	r3, [r7, #3]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	803b      	strh	r3, [r7, #0]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	da0f      	bge.n	8001bf8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	f003 020f 	and.w	r2, r3, #15
 8001bde:	4613      	mov	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	1a9b      	subs	r3, r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	3338      	adds	r3, #56	; 0x38
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	4413      	add	r3, r2
 8001bec:	3304      	adds	r3, #4
 8001bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	705a      	strb	r2, [r3, #1]
 8001bf6:	e00f      	b.n	8001c18 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	f003 020f 	and.w	r2, r3, #15
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	1a9b      	subs	r3, r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3304      	adds	r3, #4
 8001c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c24:	883a      	ldrh	r2, [r7, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	78ba      	ldrb	r2, [r7, #2]
 8001c2e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	785b      	ldrb	r3, [r3, #1]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d004      	beq.n	8001c42 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c42:	78bb      	ldrb	r3, [r7, #2]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d102      	bne.n	8001c4e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_PCD_EP_Open+0xaa>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e00e      	b.n	8001c7a <HAL_PCD_EP_Open+0xc8>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68f9      	ldr	r1, [r7, #12]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f002 fb52 	bl	8004314 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001c78:	7afb      	ldrb	r3, [r7, #11]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	da0f      	bge.n	8001cb6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	f003 020f 	and.w	r2, r3, #15
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	3338      	adds	r3, #56	; 0x38
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	3304      	adds	r3, #4
 8001cac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	705a      	strb	r2, [r3, #1]
 8001cb4:	e00f      	b.n	8001cd6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	f003 020f 	and.w	r2, r3, #15
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	4413      	add	r3, r2
 8001ccc:	3304      	adds	r3, #4
 8001cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_PCD_EP_Close+0x6e>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e00e      	b.n	8001d0e <HAL_PCD_EP_Close+0x8c>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68f9      	ldr	r1, [r7, #12]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f002 fb90 	bl	8004424 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	460b      	mov	r3, r1
 8001d24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d26:	7afb      	ldrb	r3, [r7, #11]
 8001d28:	f003 020f 	and.w	r2, r3, #15
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2200      	movs	r2, #0
 8001d56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d102      	bne.n	8001d72 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d72:	7afb      	ldrb	r3, [r7, #11]
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	6979      	ldr	r1, [r7, #20]
 8001d8a:	f002 fe6b 	bl	8004a64 <USB_EP0StartXfer>
 8001d8e:	e008      	b.n	8001da2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	6979      	ldr	r1, [r7, #20]
 8001d9e:	f002 fc1d 	bl	80045dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	f003 020f 	and.w	r2, r3, #15
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	460b      	mov	r3, r1
 8001dea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dec:	7afb      	ldrb	r3, [r7, #11]
 8001dee:	f003 020f 	and.w	r2, r3, #15
 8001df2:	4613      	mov	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	3338      	adds	r3, #56	; 0x38
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	3304      	adds	r3, #4
 8001e02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e1c:	7afb      	ldrb	r3, [r7, #11]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d102      	bne.n	8001e36 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e36:	7afb      	ldrb	r3, [r7, #11]
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d109      	bne.n	8001e54 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	6979      	ldr	r1, [r7, #20]
 8001e4e:	f002 fe09 	bl	8004a64 <USB_EP0StartXfer>
 8001e52:	e008      	b.n	8001e66 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	6979      	ldr	r1, [r7, #20]
 8001e62:	f002 fbbb 	bl	80045dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	f003 020f 	and.w	r2, r3, #15
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d901      	bls.n	8001e8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e050      	b.n	8001f30 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	da0f      	bge.n	8001eb6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	f003 020f 	and.w	r2, r3, #15
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	3338      	adds	r3, #56	; 0x38
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3304      	adds	r3, #4
 8001eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	705a      	strb	r2, [r3, #1]
 8001eb4:	e00d      	b.n	8001ed2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001eb6:	78fa      	ldrb	r2, [r7, #3]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3304      	adds	r3, #4
 8001eca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_PCD_EP_SetStall+0x82>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e01e      	b.n	8001f30 <HAL_PCD_EP_SetStall+0xc0>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68f9      	ldr	r1, [r7, #12]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f002 ff60 	bl	8004dc6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10a      	bne.n	8001f26 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	b2d9      	uxtb	r1, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f20:	461a      	mov	r2, r3
 8001f22:	f003 f93f 	bl	80051a4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f003 020f 	and.w	r2, r3, #15
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d901      	bls.n	8001f56 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e042      	b.n	8001fdc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	da0f      	bge.n	8001f7e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	f003 020f 	and.w	r2, r3, #15
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	3338      	adds	r3, #56	; 0x38
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	3304      	adds	r3, #4
 8001f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	705a      	strb	r2, [r3, #1]
 8001f7c:	e00f      	b.n	8001f9e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	f003 020f 	and.w	r2, r3, #15
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	3304      	adds	r3, #4
 8001f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_PCD_EP_ClrStall+0x86>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e00e      	b.n	8001fdc <HAL_PCD_EP_ClrStall+0xa4>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68f9      	ldr	r1, [r7, #12]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f002 ff68 	bl	8004ea2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	1a9b      	subs	r3, r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	3338      	adds	r3, #56	; 0x38
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	4413      	add	r3, r2
 8002008:	3304      	adds	r3, #4
 800200a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	699a      	ldr	r2, [r3, #24]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	429a      	cmp	r2, r3
 8002016:	d901      	bls.n	800201c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e06c      	b.n	80020f6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	429a      	cmp	r2, r3
 8002030:	d902      	bls.n	8002038 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	3303      	adds	r3, #3
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002040:	e02b      	b.n	800209a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	429a      	cmp	r2, r3
 8002056:	d902      	bls.n	800205e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3303      	adds	r3, #3
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	68d9      	ldr	r1, [r3, #12]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002076:	b2db      	uxtb	r3, r3
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	4603      	mov	r3, r0
 800207c:	6978      	ldr	r0, [r7, #20]
 800207e:	f002 fe44 	bl	8004d0a <USB_WritePacket>

    ep->xfer_buff  += len;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	441a      	add	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	699a      	ldr	r2, [r3, #24]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	441a      	add	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d809      	bhi.n	80020c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	699a      	ldr	r2, [r3, #24]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d203      	bcs.n	80020c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1be      	bne.n	8002042 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d811      	bhi.n	80020f4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	2201      	movs	r2, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	6939      	ldr	r1, [r7, #16]
 80020ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020f0:	4013      	ands	r3, r2
 80020f2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3720      	adds	r7, #32
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	333c      	adds	r3, #60	; 0x3c
 8002118:	3304      	adds	r3, #4
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b01      	cmp	r3, #1
 8002134:	f040 80a0 	bne.w	8002278 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d015      	beq.n	800216e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4a72      	ldr	r2, [pc, #456]	; (8002310 <PCD_EP_OutXfrComplete_int+0x210>)
 8002146:	4293      	cmp	r3, r2
 8002148:	f240 80dd 	bls.w	8002306 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 80d7 	beq.w	8002306 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002164:	461a      	mov	r2, r3
 8002166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800216a:	6093      	str	r3, [r2, #8]
 800216c:	e0cb      	b.n	8002306 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b00      	cmp	r3, #0
 8002176:	d009      	beq.n	800218c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002184:	461a      	mov	r2, r3
 8002186:	2320      	movs	r3, #32
 8002188:	6093      	str	r3, [r2, #8]
 800218a:	e0bc      	b.n	8002306 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 80b7 	bne.w	8002306 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4a5d      	ldr	r2, [pc, #372]	; (8002310 <PCD_EP_OutXfrComplete_int+0x210>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d90f      	bls.n	80021c0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b6:	461a      	mov	r2, r3
 80021b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021bc:	6093      	str	r3, [r2, #8]
 80021be:	e0a2      	b.n	8002306 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021d2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	0159      	lsls	r1, r3, #5
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	440b      	add	r3, r1
 80021dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80021e6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4403      	add	r3, r0
 80021f6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80021fa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800220e:	6819      	ldr	r1, [r3, #0]
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4403      	add	r3, r0
 800221e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4419      	add	r1, r3
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4403      	add	r3, r0
 8002234:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002238:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d114      	bne.n	800226a <PCD_EP_OutXfrComplete_int+0x16a>
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d108      	bne.n	800226a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002262:	461a      	mov	r2, r3
 8002264:	2101      	movs	r1, #1
 8002266:	f002 ff9d 	bl	80051a4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	4619      	mov	r1, r3
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f004 feab 	bl	8006fcc <HAL_PCD_DataOutStageCallback>
 8002276:	e046      	b.n	8002306 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4a26      	ldr	r2, [pc, #152]	; (8002314 <PCD_EP_OutXfrComplete_int+0x214>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d124      	bne.n	80022ca <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002296:	461a      	mov	r2, r3
 8002298:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800229c:	6093      	str	r3, [r2, #8]
 800229e:	e032      	b.n	8002306 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b6:	461a      	mov	r2, r3
 80022b8:	2320      	movs	r3, #32
 80022ba:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	4619      	mov	r1, r3
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f004 fe82 	bl	8006fcc <HAL_PCD_DataOutStageCallback>
 80022c8:	e01d      	b.n	8002306 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d114      	bne.n	80022fa <PCD_EP_OutXfrComplete_int+0x1fa>
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d108      	bne.n	80022fa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022f2:	461a      	mov	r2, r3
 80022f4:	2100      	movs	r1, #0
 80022f6:	f002 ff55 	bl	80051a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	4619      	mov	r1, r3
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f004 fe63 	bl	8006fcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	4f54300a 	.word	0x4f54300a
 8002314:	4f54310a 	.word	0x4f54310a

08002318 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	333c      	adds	r3, #60	; 0x3c
 8002330:	3304      	adds	r3, #4
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4413      	add	r3, r2
 800233e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4a15      	ldr	r2, [pc, #84]	; (80023a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d90e      	bls.n	800236c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002354:	2b00      	cmp	r3, #0
 8002356:	d009      	beq.n	800236c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	015a      	lsls	r2, r3, #5
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4413      	add	r3, r2
 8002360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002364:	461a      	mov	r2, r3
 8002366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800236a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f004 fe1b 	bl	8006fa8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d90c      	bls.n	8002394 <PCD_EP_OutSetupPacket_int+0x7c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d108      	bne.n	8002394 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800238c:	461a      	mov	r2, r3
 800238e:	2101      	movs	r1, #1
 8002390:	f002 ff08 	bl	80051a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	4f54300a 	.word	0x4f54300a

080023a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	70fb      	strb	r3, [r7, #3]
 80023b0:	4613      	mov	r3, r2
 80023b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d107      	bne.n	80023d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023c2:	883b      	ldrh	r3, [r7, #0]
 80023c4:	0419      	lsls	r1, r3, #16
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	629a      	str	r2, [r3, #40]	; 0x28
 80023d0:	e028      	b.n	8002424 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d8:	0c1b      	lsrs	r3, r3, #16
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	4413      	add	r3, r2
 80023de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	73fb      	strb	r3, [r7, #15]
 80023e4:	e00d      	b.n	8002402 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	3340      	adds	r3, #64	; 0x40
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	0c1b      	lsrs	r3, r3, #16
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	4413      	add	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	3301      	adds	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	3b01      	subs	r3, #1
 8002408:	429a      	cmp	r2, r3
 800240a:	d3ec      	bcc.n	80023e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800240c:	883b      	ldrh	r3, [r7, #0]
 800240e:	0418      	lsls	r0, r3, #16
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6819      	ldr	r1, [r3, #0]
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	3b01      	subs	r3, #1
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	4302      	orrs	r2, r0
 800241c:	3340      	adds	r3, #64	; 0x40
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	460b      	mov	r3, r1
 800243c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002486:	f043 0303 	orr.w	r3, r3, #3
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0cc      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024b0:	4b68      	ldr	r3, [pc, #416]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d90c      	bls.n	80024d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b65      	ldr	r3, [pc, #404]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b63      	ldr	r3, [pc, #396]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0b8      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d020      	beq.n	8002526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f0:	4b59      	ldr	r3, [pc, #356]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4a58      	ldr	r2, [pc, #352]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002508:	4b53      	ldr	r3, [pc, #332]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a52      	ldr	r2, [pc, #328]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002514:	4b50      	ldr	r3, [pc, #320]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	494d      	ldr	r1, [pc, #308]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d044      	beq.n	80025bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d119      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e07f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d003      	beq.n	800255a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002556:	2b03      	cmp	r3, #3
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255a:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e06f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256a:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e067      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800257a:	4b37      	ldr	r3, [pc, #220]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f023 0203 	bic.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4934      	ldr	r1, [pc, #208]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	4313      	orrs	r3, r2
 800258a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800258c:	f7fe faac 	bl	8000ae8 <HAL_GetTick>
 8002590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	e00a      	b.n	80025aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f7fe faa8 	bl	8000ae8 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e04f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 020c 	and.w	r2, r3, #12
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d1eb      	bne.n	8002594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025bc:	4b25      	ldr	r3, [pc, #148]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d20c      	bcs.n	80025e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b22      	ldr	r3, [pc, #136]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e032      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4916      	ldr	r1, [pc, #88]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	490e      	ldr	r1, [pc, #56]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002622:	f000 fb7f 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8002626:	4601      	mov	r1, r0
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	4a0a      	ldr	r2, [pc, #40]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	5cd3      	ldrb	r3, [r2, r3]
 8002636:	fa21 f303 	lsr.w	r3, r1, r3
 800263a:	4a09      	ldr	r2, [pc, #36]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_RCC_ClockConfig+0x1c8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fa0c 	bl	8000a60 <HAL_InitTick>

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40023c00 	.word	0x40023c00
 8002658:	40023800 	.word	0x40023800
 800265c:	080077f0 	.word	0x080077f0
 8002660:	20000000 	.word	0x20000000
 8002664:	20000004 	.word	0x20000004

08002668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_RCC_GetHCLKFreq+0x14>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000000 	.word	0x20000000

08002680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002684:	f7ff fff0 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 8002688:	4601      	mov	r1, r0
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	0a9b      	lsrs	r3, r3, #10
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	4a03      	ldr	r2, [pc, #12]	; (80026a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002696:	5cd3      	ldrb	r3, [r2, r3]
 8002698:	fa21 f303 	lsr.w	r3, r1, r3
}
 800269c:	4618      	mov	r0, r3
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40023800 	.word	0x40023800
 80026a4:	08007800 	.word	0x08007800

080026a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026ac:	f7ff ffdc 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 80026b0:	4601      	mov	r1, r0
 80026b2:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	0b5b      	lsrs	r3, r3, #13
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4a03      	ldr	r2, [pc, #12]	; (80026cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026be:	5cd3      	ldrb	r3, [r2, r3]
 80026c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40023800 	.word	0x40023800
 80026cc:	08007800 	.word	0x08007800

080026d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08c      	sub	sp, #48	; 0x30
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d010      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002708:	4b6f      	ldr	r3, [pc, #444]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800270a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800270e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	496c      	ldr	r1, [pc, #432]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002726:	2301      	movs	r3, #1
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d010      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002736:	4b64      	ldr	r3, [pc, #400]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800273c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	4960      	ldr	r1, [pc, #384]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002754:	2301      	movs	r3, #1
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d017      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002764:	4b58      	ldr	r3, [pc, #352]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800276a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4955      	ldr	r1, [pc, #340]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002782:	d101      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002784:	2301      	movs	r3, #1
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002790:	2301      	movs	r3, #1
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d017      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027a0:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ae:	4946      	ldr	r1, [pc, #280]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027be:	d101      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80027c0:	2301      	movs	r3, #1
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80027cc:	2301      	movs	r3, #1
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 808a 	beq.w	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	4b39      	ldr	r3, [pc, #228]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a38      	ldr	r2, [pc, #224]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80027fa:	4b34      	ldr	r3, [pc, #208]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a33      	ldr	r2, [pc, #204]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002804:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002806:	f7fe f96f 	bl	8000ae8 <HAL_GetTick>
 800280a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800280e:	f7fe f96b 	bl	8000ae8 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e278      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002820:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800282c:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002834:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02f      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002844:	6a3a      	ldr	r2, [r7, #32]
 8002846:	429a      	cmp	r2, r3
 8002848:	d028      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800284a:	4b1f      	ldr	r3, [pc, #124]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002852:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002854:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002856:	2201      	movs	r2, #1
 8002858:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002860:	4a19      	ldr	r2, [pc, #100]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002866:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b01      	cmp	r3, #1
 8002870:	d114      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002872:	f7fe f939 	bl	8000ae8 <HAL_GetTick>
 8002876:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002878:	e00a      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7fe f935 	bl	8000ae8 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f241 3288 	movw	r2, #5000	; 0x1388
 8002888:	4293      	cmp	r3, r2
 800288a:	d901      	bls.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e240      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002890:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0ee      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028a8:	d114      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80028aa:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80028ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028be:	4902      	ldr	r1, [pc, #8]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]
 80028c4:	e00c      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40007000 	.word	0x40007000
 80028d0:	42470e40 	.word	0x42470e40
 80028d4:	4b4a      	ldr	r3, [pc, #296]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4a49      	ldr	r2, [pc, #292]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028de:	6093      	str	r3, [r2, #8]
 80028e0:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ec:	4944      	ldr	r1, [pc, #272]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d004      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002904:	4b3f      	ldr	r3, [pc, #252]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002906:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002914:	4b3a      	ldr	r3, [pc, #232]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002922:	4937      	ldr	r1, [pc, #220]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002936:	4b32      	ldr	r3, [pc, #200]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800293c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002944:	492e      	ldr	r1, [pc, #184]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d011      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002958:	4b29      	ldr	r3, [pc, #164]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800295a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	4926      	ldr	r1, [pc, #152]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002976:	d101      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002978:	2301      	movs	r3, #1
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002988:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800298a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800298e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	491a      	ldr	r1, [pc, #104]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d011      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b8:	4911      	ldr	r1, [pc, #68]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c8:	d101      	bne.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80029ca:	2301      	movs	r3, #1
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d005      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029dc:	f040 80ff 	bne.w	8002bde <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029e6:	f7fe f87f 	bl	8000ae8 <HAL_GetTick>
 80029ea:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029ec:	e00e      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029ee:	f7fe f87b 	bl	8000ae8 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d907      	bls.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e188      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002a00:	40023800 	.word	0x40023800
 8002a04:	424711e0 	.word	0x424711e0
 8002a08:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a0c:	4b7e      	ldr	r3, [pc, #504]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ea      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d009      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d028      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d124      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a40:	4b71      	ldr	r3, [pc, #452]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a46:	0c1b      	lsrs	r3, r3, #16
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a52:	4b6d      	ldr	r3, [pc, #436]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a58:	0e1b      	lsrs	r3, r3, #24
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	019b      	lsls	r3, r3, #6
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	085b      	lsrs	r3, r3, #1
 8002a70:	3b01      	subs	r3, #1
 8002a72:	041b      	lsls	r3, r3, #16
 8002a74:	431a      	orrs	r2, r3
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	071b      	lsls	r3, r3, #28
 8002a82:	4961      	ldr	r1, [pc, #388]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d004      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d035      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ab4:	d130      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002ab6:	4b54      	ldr	r3, [pc, #336]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ac8:	4b4f      	ldr	r3, [pc, #316]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ace:	0f1b      	lsrs	r3, r3, #28
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	019b      	lsls	r3, r3, #6
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	085b      	lsrs	r3, r3, #1
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	041b      	lsls	r3, r3, #16
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	061b      	lsls	r3, r3, #24
 8002af2:	431a      	orrs	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	071b      	lsls	r3, r3, #28
 8002af8:	4943      	ldr	r1, [pc, #268]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b00:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b06:	f023 021f 	bic.w	r2, r3, #31
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	493d      	ldr	r1, [pc, #244]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d029      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b2c:	d124      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b2e:	4b36      	ldr	r3, [pc, #216]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b40:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b46:	0f1b      	lsrs	r3, r3, #28
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	019b      	lsls	r3, r3, #6
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	085b      	lsrs	r3, r3, #1
 8002b60:	3b01      	subs	r3, #1
 8002b62:	041b      	lsls	r3, r3, #16
 8002b64:	431a      	orrs	r2, r3
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	061b      	lsls	r3, r3, #24
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	071b      	lsls	r3, r3, #28
 8002b70:	4925      	ldr	r1, [pc, #148]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d016      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	019b      	lsls	r3, r3, #6
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	085b      	lsrs	r3, r3, #1
 8002b96:	3b01      	subs	r3, #1
 8002b98:	041b      	lsls	r3, r3, #16
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	061b      	lsls	r3, r3, #24
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	071b      	lsls	r3, r3, #28
 8002baa:	4917      	ldr	r1, [pc, #92]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bb8:	f7fd ff96 	bl	8000ae8 <HAL_GetTick>
 8002bbc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002bc0:	f7fd ff92 	bl	8000ae8 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e09f      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	f040 8095 	bne.w	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bec:	f7fd ff7c 	bl	8000ae8 <HAL_GetTick>
 8002bf0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bf2:	e00f      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002bf4:	f7fd ff78 	bl	8000ae8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d908      	bls.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e085      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	42470068 	.word	0x42470068
 8002c10:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c14:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c20:	d0e8      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d02b      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d127      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002c4a:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c50:	0c1b      	lsrs	r3, r3, #16
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	3301      	adds	r3, #1
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	019b      	lsls	r3, r3, #6
 8002c66:	431a      	orrs	r2, r3
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	085b      	lsrs	r3, r3, #1
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	041b      	lsls	r3, r3, #16
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	061b      	lsls	r3, r3, #24
 8002c78:	4928      	ldr	r1, [pc, #160]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c80:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c86:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	4922      	ldr	r1, [pc, #136]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01d      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002caa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cae:	d118      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb6:	0e1b      	lsrs	r3, r3, #24
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	019b      	lsls	r3, r3, #6
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	041b      	lsls	r3, r3, #16
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	4910      	ldr	r1, [pc, #64]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ce2:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ce8:	f7fd fefe 	bl	8000ae8 <HAL_GetTick>
 8002cec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002cf0:	f7fd fefa 	bl	8000ae8 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e007      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d0e:	d1ef      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3730      	adds	r7, #48	; 0x30
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	42470070 	.word	0x42470070

08002d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d3e:	4bc6      	ldr	r3, [pc, #792]	; (8003058 <HAL_RCC_GetSysClockFreq+0x334>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	f200 817e 	bhi.w	8003048 <HAL_RCC_GetSysClockFreq+0x324>
 8002d4c:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <HAL_RCC_GetSysClockFreq+0x30>)
 8002d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d52:	bf00      	nop
 8002d54:	08002d89 	.word	0x08002d89
 8002d58:	08003049 	.word	0x08003049
 8002d5c:	08003049 	.word	0x08003049
 8002d60:	08003049 	.word	0x08003049
 8002d64:	08002d8f 	.word	0x08002d8f
 8002d68:	08003049 	.word	0x08003049
 8002d6c:	08003049 	.word	0x08003049
 8002d70:	08003049 	.word	0x08003049
 8002d74:	08002d95 	.word	0x08002d95
 8002d78:	08003049 	.word	0x08003049
 8002d7c:	08003049 	.word	0x08003049
 8002d80:	08003049 	.word	0x08003049
 8002d84:	08002ef1 	.word	0x08002ef1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d88:	4bb4      	ldr	r3, [pc, #720]	; (800305c <HAL_RCC_GetSysClockFreq+0x338>)
 8002d8a:	613b      	str	r3, [r7, #16]
       break;
 8002d8c:	e15f      	b.n	800304e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d8e:	4bb4      	ldr	r3, [pc, #720]	; (8003060 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002d90:	613b      	str	r3, [r7, #16]
      break;
 8002d92:	e15c      	b.n	800304e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d94:	4bb0      	ldr	r3, [pc, #704]	; (8003058 <HAL_RCC_GetSysClockFreq+0x334>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d9c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d9e:	4bae      	ldr	r3, [pc, #696]	; (8003058 <HAL_RCC_GetSysClockFreq+0x334>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d04a      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002daa:	4bab      	ldr	r3, [pc, #684]	; (8003058 <HAL_RCC_GetSysClockFreq+0x334>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	099b      	lsrs	r3, r3, #6
 8002db0:	f04f 0400 	mov.w	r4, #0
 8002db4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	ea03 0501 	and.w	r5, r3, r1
 8002dc0:	ea04 0602 	and.w	r6, r4, r2
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	4632      	mov	r2, r6
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	f04f 0400 	mov.w	r4, #0
 8002dd0:	0154      	lsls	r4, r2, #5
 8002dd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002dd6:	014b      	lsls	r3, r1, #5
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4622      	mov	r2, r4
 8002ddc:	1b49      	subs	r1, r1, r5
 8002dde:	eb62 0206 	sbc.w	r2, r2, r6
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	f04f 0400 	mov.w	r4, #0
 8002dea:	0194      	lsls	r4, r2, #6
 8002dec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002df0:	018b      	lsls	r3, r1, #6
 8002df2:	1a5b      	subs	r3, r3, r1
 8002df4:	eb64 0402 	sbc.w	r4, r4, r2
 8002df8:	f04f 0100 	mov.w	r1, #0
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	00e2      	lsls	r2, r4, #3
 8002e02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e06:	00d9      	lsls	r1, r3, #3
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4614      	mov	r4, r2
 8002e0c:	195b      	adds	r3, r3, r5
 8002e0e:	eb44 0406 	adc.w	r4, r4, r6
 8002e12:	f04f 0100 	mov.w	r1, #0
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	0262      	lsls	r2, r4, #9
 8002e1c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002e20:	0259      	lsls	r1, r3, #9
 8002e22:	460b      	mov	r3, r1
 8002e24:	4614      	mov	r4, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	4621      	mov	r1, r4
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f04f 0400 	mov.w	r4, #0
 8002e30:	461a      	mov	r2, r3
 8002e32:	4623      	mov	r3, r4
 8002e34:	f7fd f9e6 	bl	8000204 <__aeabi_uldivmod>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	460c      	mov	r4, r1
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	e049      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e40:	4b85      	ldr	r3, [pc, #532]	; (8003058 <HAL_RCC_GetSysClockFreq+0x334>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	099b      	lsrs	r3, r3, #6
 8002e46:	f04f 0400 	mov.w	r4, #0
 8002e4a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	ea03 0501 	and.w	r5, r3, r1
 8002e56:	ea04 0602 	and.w	r6, r4, r2
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	4632      	mov	r2, r6
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	f04f 0400 	mov.w	r4, #0
 8002e66:	0154      	lsls	r4, r2, #5
 8002e68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e6c:	014b      	lsls	r3, r1, #5
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4622      	mov	r2, r4
 8002e72:	1b49      	subs	r1, r1, r5
 8002e74:	eb62 0206 	sbc.w	r2, r2, r6
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	f04f 0400 	mov.w	r4, #0
 8002e80:	0194      	lsls	r4, r2, #6
 8002e82:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e86:	018b      	lsls	r3, r1, #6
 8002e88:	1a5b      	subs	r3, r3, r1
 8002e8a:	eb64 0402 	sbc.w	r4, r4, r2
 8002e8e:	f04f 0100 	mov.w	r1, #0
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	00e2      	lsls	r2, r4, #3
 8002e98:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e9c:	00d9      	lsls	r1, r3, #3
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4614      	mov	r4, r2
 8002ea2:	195b      	adds	r3, r3, r5
 8002ea4:	eb44 0406 	adc.w	r4, r4, r6
 8002ea8:	f04f 0100 	mov.w	r1, #0
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	02a2      	lsls	r2, r4, #10
 8002eb2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002eb6:	0299      	lsls	r1, r3, #10
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4614      	mov	r4, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	4621      	mov	r1, r4
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f04f 0400 	mov.w	r4, #0
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	4623      	mov	r3, r4
 8002eca:	f7fd f99b 	bl	8000204 <__aeabi_uldivmod>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	460c      	mov	r4, r1
 8002ed2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ed4:	4b60      	ldr	r3, [pc, #384]	; (8003058 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	613b      	str	r3, [r7, #16]
      break;
 8002eee:	e0ae      	b.n	800304e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef0:	4b59      	ldr	r3, [pc, #356]	; (8003058 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002efa:	4b57      	ldr	r3, [pc, #348]	; (8003058 <HAL_RCC_GetSysClockFreq+0x334>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d04a      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f06:	4b54      	ldr	r3, [pc, #336]	; (8003058 <HAL_RCC_GetSysClockFreq+0x334>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	099b      	lsrs	r3, r3, #6
 8002f0c:	f04f 0400 	mov.w	r4, #0
 8002f10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	ea03 0501 	and.w	r5, r3, r1
 8002f1c:	ea04 0602 	and.w	r6, r4, r2
 8002f20:	4629      	mov	r1, r5
 8002f22:	4632      	mov	r2, r6
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	f04f 0400 	mov.w	r4, #0
 8002f2c:	0154      	lsls	r4, r2, #5
 8002f2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f32:	014b      	lsls	r3, r1, #5
 8002f34:	4619      	mov	r1, r3
 8002f36:	4622      	mov	r2, r4
 8002f38:	1b49      	subs	r1, r1, r5
 8002f3a:	eb62 0206 	sbc.w	r2, r2, r6
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	f04f 0400 	mov.w	r4, #0
 8002f46:	0194      	lsls	r4, r2, #6
 8002f48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f4c:	018b      	lsls	r3, r1, #6
 8002f4e:	1a5b      	subs	r3, r3, r1
 8002f50:	eb64 0402 	sbc.w	r4, r4, r2
 8002f54:	f04f 0100 	mov.w	r1, #0
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	00e2      	lsls	r2, r4, #3
 8002f5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f62:	00d9      	lsls	r1, r3, #3
 8002f64:	460b      	mov	r3, r1
 8002f66:	4614      	mov	r4, r2
 8002f68:	195b      	adds	r3, r3, r5
 8002f6a:	eb44 0406 	adc.w	r4, r4, r6
 8002f6e:	f04f 0100 	mov.w	r1, #0
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	0262      	lsls	r2, r4, #9
 8002f78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f7c:	0259      	lsls	r1, r3, #9
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4614      	mov	r4, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	4621      	mov	r1, r4
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f04f 0400 	mov.w	r4, #0
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4623      	mov	r3, r4
 8002f90:	f7fd f938 	bl	8000204 <__aeabi_uldivmod>
 8002f94:	4603      	mov	r3, r0
 8002f96:	460c      	mov	r4, r1
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	e049      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9c:	4b2e      	ldr	r3, [pc, #184]	; (8003058 <HAL_RCC_GetSysClockFreq+0x334>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	f04f 0400 	mov.w	r4, #0
 8002fa6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	ea03 0501 	and.w	r5, r3, r1
 8002fb2:	ea04 0602 	and.w	r6, r4, r2
 8002fb6:	4629      	mov	r1, r5
 8002fb8:	4632      	mov	r2, r6
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	f04f 0400 	mov.w	r4, #0
 8002fc2:	0154      	lsls	r4, r2, #5
 8002fc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fc8:	014b      	lsls	r3, r1, #5
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4622      	mov	r2, r4
 8002fce:	1b49      	subs	r1, r1, r5
 8002fd0:	eb62 0206 	sbc.w	r2, r2, r6
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	f04f 0400 	mov.w	r4, #0
 8002fdc:	0194      	lsls	r4, r2, #6
 8002fde:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fe2:	018b      	lsls	r3, r1, #6
 8002fe4:	1a5b      	subs	r3, r3, r1
 8002fe6:	eb64 0402 	sbc.w	r4, r4, r2
 8002fea:	f04f 0100 	mov.w	r1, #0
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	00e2      	lsls	r2, r4, #3
 8002ff4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ff8:	00d9      	lsls	r1, r3, #3
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4614      	mov	r4, r2
 8002ffe:	195b      	adds	r3, r3, r5
 8003000:	eb44 0406 	adc.w	r4, r4, r6
 8003004:	f04f 0100 	mov.w	r1, #0
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	02a2      	lsls	r2, r4, #10
 800300e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003012:	0299      	lsls	r1, r3, #10
 8003014:	460b      	mov	r3, r1
 8003016:	4614      	mov	r4, r2
 8003018:	4618      	mov	r0, r3
 800301a:	4621      	mov	r1, r4
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f04f 0400 	mov.w	r4, #0
 8003022:	461a      	mov	r2, r3
 8003024:	4623      	mov	r3, r4
 8003026:	f7fd f8ed 	bl	8000204 <__aeabi_uldivmod>
 800302a:	4603      	mov	r3, r0
 800302c:	460c      	mov	r4, r1
 800302e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <HAL_RCC_GetSysClockFreq+0x334>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	0f1b      	lsrs	r3, r3, #28
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	fbb2 f3f3 	udiv	r3, r2, r3
 8003044:	613b      	str	r3, [r7, #16]
      break;
 8003046:	e002      	b.n	800304e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <HAL_RCC_GetSysClockFreq+0x338>)
 800304a:	613b      	str	r3, [r7, #16]
      break;
 800304c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800304e:	693b      	ldr	r3, [r7, #16]
}
 8003050:	4618      	mov	r0, r3
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003058:	40023800 	.word	0x40023800
 800305c:	00f42400 	.word	0x00f42400
 8003060:	007a1200 	.word	0x007a1200

08003064 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 8083 	beq.w	8003184 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800307e:	4b95      	ldr	r3, [pc, #596]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b04      	cmp	r3, #4
 8003088:	d019      	beq.n	80030be <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800308a:	4b92      	ldr	r3, [pc, #584]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003092:	2b08      	cmp	r3, #8
 8003094:	d106      	bne.n	80030a4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003096:	4b8f      	ldr	r3, [pc, #572]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a2:	d00c      	beq.n	80030be <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a4:	4b8b      	ldr	r3, [pc, #556]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030ac:	2b0c      	cmp	r3, #12
 80030ae:	d112      	bne.n	80030d6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b0:	4b88      	ldr	r3, [pc, #544]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030bc:	d10b      	bne.n	80030d6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030be:	4b85      	ldr	r3, [pc, #532]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d05b      	beq.n	8003182 <HAL_RCC_OscConfig+0x11e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d157      	bne.n	8003182 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e216      	b.n	8003504 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030de:	d106      	bne.n	80030ee <HAL_RCC_OscConfig+0x8a>
 80030e0:	4b7c      	ldr	r3, [pc, #496]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a7b      	ldr	r2, [pc, #492]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 80030e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	e01d      	b.n	800312a <HAL_RCC_OscConfig+0xc6>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030f6:	d10c      	bne.n	8003112 <HAL_RCC_OscConfig+0xae>
 80030f8:	4b76      	ldr	r3, [pc, #472]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a75      	ldr	r2, [pc, #468]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 80030fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	4b73      	ldr	r3, [pc, #460]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a72      	ldr	r2, [pc, #456]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 800310a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	e00b      	b.n	800312a <HAL_RCC_OscConfig+0xc6>
 8003112:	4b70      	ldr	r3, [pc, #448]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6f      	ldr	r2, [pc, #444]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	4b6d      	ldr	r3, [pc, #436]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a6c      	ldr	r2, [pc, #432]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003128:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d013      	beq.n	800315a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003132:	f7fd fcd9 	bl	8000ae8 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800313a:	f7fd fcd5 	bl	8000ae8 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b64      	cmp	r3, #100	; 0x64
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e1db      	b.n	8003504 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314c:	4b61      	ldr	r3, [pc, #388]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0xd6>
 8003158:	e014      	b.n	8003184 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315a:	f7fd fcc5 	bl	8000ae8 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003162:	f7fd fcc1 	bl	8000ae8 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b64      	cmp	r3, #100	; 0x64
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e1c7      	b.n	8003504 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003174:	4b57      	ldr	r3, [pc, #348]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f0      	bne.n	8003162 <HAL_RCC_OscConfig+0xfe>
 8003180:	e000      	b.n	8003184 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003182:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d06f      	beq.n	8003270 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003190:	4b50      	ldr	r3, [pc, #320]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 030c 	and.w	r3, r3, #12
 8003198:	2b00      	cmp	r3, #0
 800319a:	d017      	beq.n	80031cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800319c:	4b4d      	ldr	r3, [pc, #308]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d105      	bne.n	80031b4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031a8:	4b4a      	ldr	r3, [pc, #296]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00b      	beq.n	80031cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b4:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	d11c      	bne.n	80031fa <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c0:	4b44      	ldr	r3, [pc, #272]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d116      	bne.n	80031fa <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031cc:	4b41      	ldr	r3, [pc, #260]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_OscConfig+0x180>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e18f      	b.n	8003504 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e4:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4938      	ldr	r1, [pc, #224]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f8:	e03a      	b.n	8003270 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d020      	beq.n	8003244 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003202:	4b35      	ldr	r3, [pc, #212]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003204:	2201      	movs	r2, #1
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fd fc6e 	bl	8000ae8 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003210:	f7fd fc6a 	bl	8000ae8 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e170      	b.n	8003504 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003222:	4b2c      	ldr	r3, [pc, #176]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322e:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4925      	ldr	r1, [pc, #148]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
 8003242:	e015      	b.n	8003270 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003244:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324a:	f7fd fc4d 	bl	8000ae8 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003252:	f7fd fc49 	bl	8000ae8 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e14f      	b.n	8003504 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003264:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1f0      	bne.n	8003252 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b00      	cmp	r3, #0
 800327a:	d037      	beq.n	80032ec <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d016      	beq.n	80032b2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003284:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HAL_RCC_OscConfig+0x278>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328a:	f7fd fc2d 	bl	8000ae8 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003292:	f7fd fc29 	bl	8000ae8 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e12f      	b.n	8003504 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 80032a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x22e>
 80032b0:	e01c      	b.n	80032ec <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <HAL_RCC_OscConfig+0x278>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b8:	f7fd fc16 	bl	8000ae8 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032be:	e00f      	b.n	80032e0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032c0:	f7fd fc12 	bl	8000ae8 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d908      	bls.n	80032e0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e118      	b.n	8003504 <HAL_RCC_OscConfig+0x4a0>
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800
 80032d8:	42470000 	.word	0x42470000
 80032dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e0:	4b8a      	ldr	r3, [pc, #552]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 80032e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e9      	bne.n	80032c0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8097 	beq.w	8003428 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fa:	2300      	movs	r3, #0
 80032fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fe:	4b83      	ldr	r3, [pc, #524]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10f      	bne.n	800332a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	4b7f      	ldr	r3, [pc, #508]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	4a7e      	ldr	r2, [pc, #504]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 8003314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003318:	6413      	str	r3, [r2, #64]	; 0x40
 800331a:	4b7c      	ldr	r3, [pc, #496]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003326:	2301      	movs	r3, #1
 8003328:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332a:	4b79      	ldr	r3, [pc, #484]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d118      	bne.n	8003368 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003336:	4b76      	ldr	r3, [pc, #472]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a75      	ldr	r2, [pc, #468]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003342:	f7fd fbd1 	bl	8000ae8 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334a:	f7fd fbcd 	bl	8000ae8 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e0d3      	b.n	8003504 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335c:	4b6c      	ldr	r3, [pc, #432]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d106      	bne.n	800337e <HAL_RCC_OscConfig+0x31a>
 8003370:	4b66      	ldr	r3, [pc, #408]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003374:	4a65      	ldr	r2, [pc, #404]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6713      	str	r3, [r2, #112]	; 0x70
 800337c:	e01c      	b.n	80033b8 <HAL_RCC_OscConfig+0x354>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b05      	cmp	r3, #5
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x33c>
 8003386:	4b61      	ldr	r3, [pc, #388]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	4a60      	ldr	r2, [pc, #384]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	6713      	str	r3, [r2, #112]	; 0x70
 8003392:	4b5e      	ldr	r3, [pc, #376]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	4a5d      	ldr	r2, [pc, #372]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6713      	str	r3, [r2, #112]	; 0x70
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0x354>
 80033a0:	4b5a      	ldr	r3, [pc, #360]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	4a59      	ldr	r2, [pc, #356]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70
 80033ac:	4b57      	ldr	r3, [pc, #348]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	4a56      	ldr	r2, [pc, #344]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 80033b2:	f023 0304 	bic.w	r3, r3, #4
 80033b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d015      	beq.n	80033ec <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c0:	f7fd fb92 	bl	8000ae8 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c6:	e00a      	b.n	80033de <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c8:	f7fd fb8e 	bl	8000ae8 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e092      	b.n	8003504 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033de:	4b4b      	ldr	r3, [pc, #300]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0ee      	beq.n	80033c8 <HAL_RCC_OscConfig+0x364>
 80033ea:	e014      	b.n	8003416 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ec:	f7fd fb7c 	bl	8000ae8 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f2:	e00a      	b.n	800340a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f4:	f7fd fb78 	bl	8000ae8 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e07c      	b.n	8003504 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340a:	4b40      	ldr	r3, [pc, #256]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1ee      	bne.n	80033f4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003416:	7dfb      	ldrb	r3, [r7, #23]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d105      	bne.n	8003428 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800341c:	4b3b      	ldr	r3, [pc, #236]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	4a3a      	ldr	r2, [pc, #232]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 8003422:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003426:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d068      	beq.n	8003502 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003430:	4b36      	ldr	r3, [pc, #216]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 030c 	and.w	r3, r3, #12
 8003438:	2b08      	cmp	r3, #8
 800343a:	d060      	beq.n	80034fe <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d145      	bne.n	80034d0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003444:	4b33      	ldr	r3, [pc, #204]	; (8003514 <HAL_RCC_OscConfig+0x4b0>)
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344a:	f7fd fb4d 	bl	8000ae8 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003452:	f7fd fb49 	bl	8000ae8 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e04f      	b.n	8003504 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003464:	4b29      	ldr	r3, [pc, #164]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f0      	bne.n	8003452 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	019b      	lsls	r3, r3, #6
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003486:	085b      	lsrs	r3, r3, #1
 8003488:	3b01      	subs	r3, #1
 800348a:	041b      	lsls	r3, r3, #16
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	061b      	lsls	r3, r3, #24
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	071b      	lsls	r3, r3, #28
 800349c:	491b      	ldr	r1, [pc, #108]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a2:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <HAL_RCC_OscConfig+0x4b0>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7fd fb1e 	bl	8000ae8 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b0:	f7fd fb1a 	bl	8000ae8 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e020      	b.n	8003504 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c2:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0x44c>
 80034ce:	e018      	b.n	8003502 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d0:	4b10      	ldr	r3, [pc, #64]	; (8003514 <HAL_RCC_OscConfig+0x4b0>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d6:	f7fd fb07 	bl	8000ae8 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034de:	f7fd fb03 	bl	8000ae8 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e009      	b.n	8003504 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f0:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f0      	bne.n	80034de <HAL_RCC_OscConfig+0x47a>
 80034fc:	e001      	b.n	8003502 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40023800 	.word	0x40023800
 8003510:	40007000 	.word	0x40007000
 8003514:	42470060 	.word	0x42470060

08003518 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e03f      	b.n	80035aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fd f980 	bl	8000844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2224      	movs	r2, #36	; 0x24
 8003548:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800355a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f829 	bl	80035b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003570:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003580:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003590:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b8:	b085      	sub	sp, #20
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80035f6:	f023 030c 	bic.w	r3, r3, #12
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	68f9      	ldr	r1, [r7, #12]
 8003600:	430b      	orrs	r3, r1
 8003602:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003622:	f040 818b 	bne.w	800393c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4ac1      	ldr	r2, [pc, #772]	; (8003930 <UART_SetConfig+0x37c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d005      	beq.n	800363c <UART_SetConfig+0x88>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4abf      	ldr	r2, [pc, #764]	; (8003934 <UART_SetConfig+0x380>)
 8003636:	4293      	cmp	r3, r2
 8003638:	f040 80bd 	bne.w	80037b6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800363c:	f7ff f834 	bl	80026a8 <HAL_RCC_GetPCLK2Freq>
 8003640:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	461d      	mov	r5, r3
 8003646:	f04f 0600 	mov.w	r6, #0
 800364a:	46a8      	mov	r8, r5
 800364c:	46b1      	mov	r9, r6
 800364e:	eb18 0308 	adds.w	r3, r8, r8
 8003652:	eb49 0409 	adc.w	r4, r9, r9
 8003656:	4698      	mov	r8, r3
 8003658:	46a1      	mov	r9, r4
 800365a:	eb18 0805 	adds.w	r8, r8, r5
 800365e:	eb49 0906 	adc.w	r9, r9, r6
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800366e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003672:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003676:	4688      	mov	r8, r1
 8003678:	4691      	mov	r9, r2
 800367a:	eb18 0005 	adds.w	r0, r8, r5
 800367e:	eb49 0106 	adc.w	r1, r9, r6
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	461d      	mov	r5, r3
 8003688:	f04f 0600 	mov.w	r6, #0
 800368c:	196b      	adds	r3, r5, r5
 800368e:	eb46 0406 	adc.w	r4, r6, r6
 8003692:	461a      	mov	r2, r3
 8003694:	4623      	mov	r3, r4
 8003696:	f7fc fdb5 	bl	8000204 <__aeabi_uldivmod>
 800369a:	4603      	mov	r3, r0
 800369c:	460c      	mov	r4, r1
 800369e:	461a      	mov	r2, r3
 80036a0:	4ba5      	ldr	r3, [pc, #660]	; (8003938 <UART_SetConfig+0x384>)
 80036a2:	fba3 2302 	umull	r2, r3, r3, r2
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	461d      	mov	r5, r3
 80036b0:	f04f 0600 	mov.w	r6, #0
 80036b4:	46a9      	mov	r9, r5
 80036b6:	46b2      	mov	sl, r6
 80036b8:	eb19 0309 	adds.w	r3, r9, r9
 80036bc:	eb4a 040a 	adc.w	r4, sl, sl
 80036c0:	4699      	mov	r9, r3
 80036c2:	46a2      	mov	sl, r4
 80036c4:	eb19 0905 	adds.w	r9, r9, r5
 80036c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80036cc:	f04f 0100 	mov.w	r1, #0
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036e0:	4689      	mov	r9, r1
 80036e2:	4692      	mov	sl, r2
 80036e4:	eb19 0005 	adds.w	r0, r9, r5
 80036e8:	eb4a 0106 	adc.w	r1, sl, r6
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	461d      	mov	r5, r3
 80036f2:	f04f 0600 	mov.w	r6, #0
 80036f6:	196b      	adds	r3, r5, r5
 80036f8:	eb46 0406 	adc.w	r4, r6, r6
 80036fc:	461a      	mov	r2, r3
 80036fe:	4623      	mov	r3, r4
 8003700:	f7fc fd80 	bl	8000204 <__aeabi_uldivmod>
 8003704:	4603      	mov	r3, r0
 8003706:	460c      	mov	r4, r1
 8003708:	461a      	mov	r2, r3
 800370a:	4b8b      	ldr	r3, [pc, #556]	; (8003938 <UART_SetConfig+0x384>)
 800370c:	fba3 1302 	umull	r1, r3, r3, r2
 8003710:	095b      	lsrs	r3, r3, #5
 8003712:	2164      	movs	r1, #100	; 0x64
 8003714:	fb01 f303 	mul.w	r3, r1, r3
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	3332      	adds	r3, #50	; 0x32
 800371e:	4a86      	ldr	r2, [pc, #536]	; (8003938 <UART_SetConfig+0x384>)
 8003720:	fba2 2303 	umull	r2, r3, r2, r3
 8003724:	095b      	lsrs	r3, r3, #5
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800372c:	4498      	add	r8, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	461d      	mov	r5, r3
 8003732:	f04f 0600 	mov.w	r6, #0
 8003736:	46a9      	mov	r9, r5
 8003738:	46b2      	mov	sl, r6
 800373a:	eb19 0309 	adds.w	r3, r9, r9
 800373e:	eb4a 040a 	adc.w	r4, sl, sl
 8003742:	4699      	mov	r9, r3
 8003744:	46a2      	mov	sl, r4
 8003746:	eb19 0905 	adds.w	r9, r9, r5
 800374a:	eb4a 0a06 	adc.w	sl, sl, r6
 800374e:	f04f 0100 	mov.w	r1, #0
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800375a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800375e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003762:	4689      	mov	r9, r1
 8003764:	4692      	mov	sl, r2
 8003766:	eb19 0005 	adds.w	r0, r9, r5
 800376a:	eb4a 0106 	adc.w	r1, sl, r6
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	461d      	mov	r5, r3
 8003774:	f04f 0600 	mov.w	r6, #0
 8003778:	196b      	adds	r3, r5, r5
 800377a:	eb46 0406 	adc.w	r4, r6, r6
 800377e:	461a      	mov	r2, r3
 8003780:	4623      	mov	r3, r4
 8003782:	f7fc fd3f 	bl	8000204 <__aeabi_uldivmod>
 8003786:	4603      	mov	r3, r0
 8003788:	460c      	mov	r4, r1
 800378a:	461a      	mov	r2, r3
 800378c:	4b6a      	ldr	r3, [pc, #424]	; (8003938 <UART_SetConfig+0x384>)
 800378e:	fba3 1302 	umull	r1, r3, r3, r2
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	2164      	movs	r1, #100	; 0x64
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	3332      	adds	r3, #50	; 0x32
 80037a0:	4a65      	ldr	r2, [pc, #404]	; (8003938 <UART_SetConfig+0x384>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	f003 0207 	and.w	r2, r3, #7
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4442      	add	r2, r8
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	e26f      	b.n	8003c96 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037b6:	f7fe ff63 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 80037ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	461d      	mov	r5, r3
 80037c0:	f04f 0600 	mov.w	r6, #0
 80037c4:	46a8      	mov	r8, r5
 80037c6:	46b1      	mov	r9, r6
 80037c8:	eb18 0308 	adds.w	r3, r8, r8
 80037cc:	eb49 0409 	adc.w	r4, r9, r9
 80037d0:	4698      	mov	r8, r3
 80037d2:	46a1      	mov	r9, r4
 80037d4:	eb18 0805 	adds.w	r8, r8, r5
 80037d8:	eb49 0906 	adc.w	r9, r9, r6
 80037dc:	f04f 0100 	mov.w	r1, #0
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037f0:	4688      	mov	r8, r1
 80037f2:	4691      	mov	r9, r2
 80037f4:	eb18 0005 	adds.w	r0, r8, r5
 80037f8:	eb49 0106 	adc.w	r1, r9, r6
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	461d      	mov	r5, r3
 8003802:	f04f 0600 	mov.w	r6, #0
 8003806:	196b      	adds	r3, r5, r5
 8003808:	eb46 0406 	adc.w	r4, r6, r6
 800380c:	461a      	mov	r2, r3
 800380e:	4623      	mov	r3, r4
 8003810:	f7fc fcf8 	bl	8000204 <__aeabi_uldivmod>
 8003814:	4603      	mov	r3, r0
 8003816:	460c      	mov	r4, r1
 8003818:	461a      	mov	r2, r3
 800381a:	4b47      	ldr	r3, [pc, #284]	; (8003938 <UART_SetConfig+0x384>)
 800381c:	fba3 2302 	umull	r2, r3, r3, r2
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	461d      	mov	r5, r3
 800382a:	f04f 0600 	mov.w	r6, #0
 800382e:	46a9      	mov	r9, r5
 8003830:	46b2      	mov	sl, r6
 8003832:	eb19 0309 	adds.w	r3, r9, r9
 8003836:	eb4a 040a 	adc.w	r4, sl, sl
 800383a:	4699      	mov	r9, r3
 800383c:	46a2      	mov	sl, r4
 800383e:	eb19 0905 	adds.w	r9, r9, r5
 8003842:	eb4a 0a06 	adc.w	sl, sl, r6
 8003846:	f04f 0100 	mov.w	r1, #0
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003852:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003856:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800385a:	4689      	mov	r9, r1
 800385c:	4692      	mov	sl, r2
 800385e:	eb19 0005 	adds.w	r0, r9, r5
 8003862:	eb4a 0106 	adc.w	r1, sl, r6
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	461d      	mov	r5, r3
 800386c:	f04f 0600 	mov.w	r6, #0
 8003870:	196b      	adds	r3, r5, r5
 8003872:	eb46 0406 	adc.w	r4, r6, r6
 8003876:	461a      	mov	r2, r3
 8003878:	4623      	mov	r3, r4
 800387a:	f7fc fcc3 	bl	8000204 <__aeabi_uldivmod>
 800387e:	4603      	mov	r3, r0
 8003880:	460c      	mov	r4, r1
 8003882:	461a      	mov	r2, r3
 8003884:	4b2c      	ldr	r3, [pc, #176]	; (8003938 <UART_SetConfig+0x384>)
 8003886:	fba3 1302 	umull	r1, r3, r3, r2
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	2164      	movs	r1, #100	; 0x64
 800388e:	fb01 f303 	mul.w	r3, r1, r3
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	3332      	adds	r3, #50	; 0x32
 8003898:	4a27      	ldr	r2, [pc, #156]	; (8003938 <UART_SetConfig+0x384>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038a6:	4498      	add	r8, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	461d      	mov	r5, r3
 80038ac:	f04f 0600 	mov.w	r6, #0
 80038b0:	46a9      	mov	r9, r5
 80038b2:	46b2      	mov	sl, r6
 80038b4:	eb19 0309 	adds.w	r3, r9, r9
 80038b8:	eb4a 040a 	adc.w	r4, sl, sl
 80038bc:	4699      	mov	r9, r3
 80038be:	46a2      	mov	sl, r4
 80038c0:	eb19 0905 	adds.w	r9, r9, r5
 80038c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80038c8:	f04f 0100 	mov.w	r1, #0
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038dc:	4689      	mov	r9, r1
 80038de:	4692      	mov	sl, r2
 80038e0:	eb19 0005 	adds.w	r0, r9, r5
 80038e4:	eb4a 0106 	adc.w	r1, sl, r6
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	461d      	mov	r5, r3
 80038ee:	f04f 0600 	mov.w	r6, #0
 80038f2:	196b      	adds	r3, r5, r5
 80038f4:	eb46 0406 	adc.w	r4, r6, r6
 80038f8:	461a      	mov	r2, r3
 80038fa:	4623      	mov	r3, r4
 80038fc:	f7fc fc82 	bl	8000204 <__aeabi_uldivmod>
 8003900:	4603      	mov	r3, r0
 8003902:	460c      	mov	r4, r1
 8003904:	461a      	mov	r2, r3
 8003906:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <UART_SetConfig+0x384>)
 8003908:	fba3 1302 	umull	r1, r3, r3, r2
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	2164      	movs	r1, #100	; 0x64
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	3332      	adds	r3, #50	; 0x32
 800391a:	4a07      	ldr	r2, [pc, #28]	; (8003938 <UART_SetConfig+0x384>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	095b      	lsrs	r3, r3, #5
 8003922:	f003 0207 	and.w	r2, r3, #7
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4442      	add	r2, r8
 800392c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800392e:	e1b2      	b.n	8003c96 <UART_SetConfig+0x6e2>
 8003930:	40011000 	.word	0x40011000
 8003934:	40011400 	.word	0x40011400
 8003938:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4ad7      	ldr	r2, [pc, #860]	; (8003ca0 <UART_SetConfig+0x6ec>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d005      	beq.n	8003952 <UART_SetConfig+0x39e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4ad6      	ldr	r2, [pc, #856]	; (8003ca4 <UART_SetConfig+0x6f0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	f040 80d1 	bne.w	8003af4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003952:	f7fe fea9 	bl	80026a8 <HAL_RCC_GetPCLK2Freq>
 8003956:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	469a      	mov	sl, r3
 800395c:	f04f 0b00 	mov.w	fp, #0
 8003960:	46d0      	mov	r8, sl
 8003962:	46d9      	mov	r9, fp
 8003964:	eb18 0308 	adds.w	r3, r8, r8
 8003968:	eb49 0409 	adc.w	r4, r9, r9
 800396c:	4698      	mov	r8, r3
 800396e:	46a1      	mov	r9, r4
 8003970:	eb18 080a 	adds.w	r8, r8, sl
 8003974:	eb49 090b 	adc.w	r9, r9, fp
 8003978:	f04f 0100 	mov.w	r1, #0
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003984:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003988:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800398c:	4688      	mov	r8, r1
 800398e:	4691      	mov	r9, r2
 8003990:	eb1a 0508 	adds.w	r5, sl, r8
 8003994:	eb4b 0609 	adc.w	r6, fp, r9
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4619      	mov	r1, r3
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	f04f 0400 	mov.w	r4, #0
 80039aa:	0094      	lsls	r4, r2, #2
 80039ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039b0:	008b      	lsls	r3, r1, #2
 80039b2:	461a      	mov	r2, r3
 80039b4:	4623      	mov	r3, r4
 80039b6:	4628      	mov	r0, r5
 80039b8:	4631      	mov	r1, r6
 80039ba:	f7fc fc23 	bl	8000204 <__aeabi_uldivmod>
 80039be:	4603      	mov	r3, r0
 80039c0:	460c      	mov	r4, r1
 80039c2:	461a      	mov	r2, r3
 80039c4:	4bb8      	ldr	r3, [pc, #736]	; (8003ca8 <UART_SetConfig+0x6f4>)
 80039c6:	fba3 2302 	umull	r2, r3, r3, r2
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	469b      	mov	fp, r3
 80039d4:	f04f 0c00 	mov.w	ip, #0
 80039d8:	46d9      	mov	r9, fp
 80039da:	46e2      	mov	sl, ip
 80039dc:	eb19 0309 	adds.w	r3, r9, r9
 80039e0:	eb4a 040a 	adc.w	r4, sl, sl
 80039e4:	4699      	mov	r9, r3
 80039e6:	46a2      	mov	sl, r4
 80039e8:	eb19 090b 	adds.w	r9, r9, fp
 80039ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80039f0:	f04f 0100 	mov.w	r1, #0
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a04:	4689      	mov	r9, r1
 8003a06:	4692      	mov	sl, r2
 8003a08:	eb1b 0509 	adds.w	r5, fp, r9
 8003a0c:	eb4c 060a 	adc.w	r6, ip, sl
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4619      	mov	r1, r3
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	f04f 0400 	mov.w	r4, #0
 8003a22:	0094      	lsls	r4, r2, #2
 8003a24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a28:	008b      	lsls	r3, r1, #2
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	4623      	mov	r3, r4
 8003a2e:	4628      	mov	r0, r5
 8003a30:	4631      	mov	r1, r6
 8003a32:	f7fc fbe7 	bl	8000204 <__aeabi_uldivmod>
 8003a36:	4603      	mov	r3, r0
 8003a38:	460c      	mov	r4, r1
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4b9a      	ldr	r3, [pc, #616]	; (8003ca8 <UART_SetConfig+0x6f4>)
 8003a3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	2164      	movs	r1, #100	; 0x64
 8003a46:	fb01 f303 	mul.w	r3, r1, r3
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	3332      	adds	r3, #50	; 0x32
 8003a50:	4a95      	ldr	r2, [pc, #596]	; (8003ca8 <UART_SetConfig+0x6f4>)
 8003a52:	fba2 2303 	umull	r2, r3, r2, r3
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a5c:	4498      	add	r8, r3
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	469b      	mov	fp, r3
 8003a62:	f04f 0c00 	mov.w	ip, #0
 8003a66:	46d9      	mov	r9, fp
 8003a68:	46e2      	mov	sl, ip
 8003a6a:	eb19 0309 	adds.w	r3, r9, r9
 8003a6e:	eb4a 040a 	adc.w	r4, sl, sl
 8003a72:	4699      	mov	r9, r3
 8003a74:	46a2      	mov	sl, r4
 8003a76:	eb19 090b 	adds.w	r9, r9, fp
 8003a7a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a7e:	f04f 0100 	mov.w	r1, #0
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a92:	4689      	mov	r9, r1
 8003a94:	4692      	mov	sl, r2
 8003a96:	eb1b 0509 	adds.w	r5, fp, r9
 8003a9a:	eb4c 060a 	adc.w	r6, ip, sl
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	f04f 0400 	mov.w	r4, #0
 8003ab0:	0094      	lsls	r4, r2, #2
 8003ab2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ab6:	008b      	lsls	r3, r1, #2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4623      	mov	r3, r4
 8003abc:	4628      	mov	r0, r5
 8003abe:	4631      	mov	r1, r6
 8003ac0:	f7fc fba0 	bl	8000204 <__aeabi_uldivmod>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4b77      	ldr	r3, [pc, #476]	; (8003ca8 <UART_SetConfig+0x6f4>)
 8003acc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad0:	095b      	lsrs	r3, r3, #5
 8003ad2:	2164      	movs	r1, #100	; 0x64
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	3332      	adds	r3, #50	; 0x32
 8003ade:	4a72      	ldr	r2, [pc, #456]	; (8003ca8 <UART_SetConfig+0x6f4>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	f003 020f 	and.w	r2, r3, #15
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4442      	add	r2, r8
 8003af0:	609a      	str	r2, [r3, #8]
 8003af2:	e0d0      	b.n	8003c96 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003af4:	f7fe fdc4 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8003af8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	469a      	mov	sl, r3
 8003afe:	f04f 0b00 	mov.w	fp, #0
 8003b02:	46d0      	mov	r8, sl
 8003b04:	46d9      	mov	r9, fp
 8003b06:	eb18 0308 	adds.w	r3, r8, r8
 8003b0a:	eb49 0409 	adc.w	r4, r9, r9
 8003b0e:	4698      	mov	r8, r3
 8003b10:	46a1      	mov	r9, r4
 8003b12:	eb18 080a 	adds.w	r8, r8, sl
 8003b16:	eb49 090b 	adc.w	r9, r9, fp
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b26:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b2a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b2e:	4688      	mov	r8, r1
 8003b30:	4691      	mov	r9, r2
 8003b32:	eb1a 0508 	adds.w	r5, sl, r8
 8003b36:	eb4b 0609 	adc.w	r6, fp, r9
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	f04f 0400 	mov.w	r4, #0
 8003b4c:	0094      	lsls	r4, r2, #2
 8003b4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b52:	008b      	lsls	r3, r1, #2
 8003b54:	461a      	mov	r2, r3
 8003b56:	4623      	mov	r3, r4
 8003b58:	4628      	mov	r0, r5
 8003b5a:	4631      	mov	r1, r6
 8003b5c:	f7fc fb52 	bl	8000204 <__aeabi_uldivmod>
 8003b60:	4603      	mov	r3, r0
 8003b62:	460c      	mov	r4, r1
 8003b64:	461a      	mov	r2, r3
 8003b66:	4b50      	ldr	r3, [pc, #320]	; (8003ca8 <UART_SetConfig+0x6f4>)
 8003b68:	fba3 2302 	umull	r2, r3, r3, r2
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	469b      	mov	fp, r3
 8003b76:	f04f 0c00 	mov.w	ip, #0
 8003b7a:	46d9      	mov	r9, fp
 8003b7c:	46e2      	mov	sl, ip
 8003b7e:	eb19 0309 	adds.w	r3, r9, r9
 8003b82:	eb4a 040a 	adc.w	r4, sl, sl
 8003b86:	4699      	mov	r9, r3
 8003b88:	46a2      	mov	sl, r4
 8003b8a:	eb19 090b 	adds.w	r9, r9, fp
 8003b8e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b92:	f04f 0100 	mov.w	r1, #0
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ba2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ba6:	4689      	mov	r9, r1
 8003ba8:	4692      	mov	sl, r2
 8003baa:	eb1b 0509 	adds.w	r5, fp, r9
 8003bae:	eb4c 060a 	adc.w	r6, ip, sl
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	f04f 0400 	mov.w	r4, #0
 8003bc4:	0094      	lsls	r4, r2, #2
 8003bc6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bca:	008b      	lsls	r3, r1, #2
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4623      	mov	r3, r4
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	4631      	mov	r1, r6
 8003bd4:	f7fc fb16 	bl	8000204 <__aeabi_uldivmod>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	460c      	mov	r4, r1
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4b32      	ldr	r3, [pc, #200]	; (8003ca8 <UART_SetConfig+0x6f4>)
 8003be0:	fba3 1302 	umull	r1, r3, r3, r2
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	2164      	movs	r1, #100	; 0x64
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	3332      	adds	r3, #50	; 0x32
 8003bf2:	4a2d      	ldr	r2, [pc, #180]	; (8003ca8 <UART_SetConfig+0x6f4>)
 8003bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bfe:	4498      	add	r8, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	469b      	mov	fp, r3
 8003c04:	f04f 0c00 	mov.w	ip, #0
 8003c08:	46d9      	mov	r9, fp
 8003c0a:	46e2      	mov	sl, ip
 8003c0c:	eb19 0309 	adds.w	r3, r9, r9
 8003c10:	eb4a 040a 	adc.w	r4, sl, sl
 8003c14:	4699      	mov	r9, r3
 8003c16:	46a2      	mov	sl, r4
 8003c18:	eb19 090b 	adds.w	r9, r9, fp
 8003c1c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c20:	f04f 0100 	mov.w	r1, #0
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c34:	4689      	mov	r9, r1
 8003c36:	4692      	mov	sl, r2
 8003c38:	eb1b 0509 	adds.w	r5, fp, r9
 8003c3c:	eb4c 060a 	adc.w	r6, ip, sl
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	4619      	mov	r1, r3
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	f04f 0400 	mov.w	r4, #0
 8003c52:	0094      	lsls	r4, r2, #2
 8003c54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c58:	008b      	lsls	r3, r1, #2
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4623      	mov	r3, r4
 8003c5e:	4628      	mov	r0, r5
 8003c60:	4631      	mov	r1, r6
 8003c62:	f7fc facf 	bl	8000204 <__aeabi_uldivmod>
 8003c66:	4603      	mov	r3, r0
 8003c68:	460c      	mov	r4, r1
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ca8 <UART_SetConfig+0x6f4>)
 8003c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	2164      	movs	r1, #100	; 0x64
 8003c76:	fb01 f303 	mul.w	r3, r1, r3
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	3332      	adds	r3, #50	; 0x32
 8003c80:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <UART_SetConfig+0x6f4>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	f003 020f 	and.w	r2, r3, #15
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4442      	add	r2, r8
 8003c92:	609a      	str	r2, [r3, #8]
}
 8003c94:	e7ff      	b.n	8003c96 <UART_SetConfig+0x6e2>
 8003c96:	bf00      	nop
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ca0:	40011000 	.word	0x40011000
 8003ca4:	40011400 	.word	0x40011400
 8003ca8:	51eb851f 	.word	0x51eb851f

08003cac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cac:	b084      	sub	sp, #16
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	f107 001c 	add.w	r0, r7, #28
 8003cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d122      	bne.n	8003d0a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d105      	bne.n	8003cfe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f001 faae 	bl	8005260 <USB_CoreReset>
 8003d04:	4603      	mov	r3, r0
 8003d06:	73fb      	strb	r3, [r7, #15]
 8003d08:	e01a      	b.n	8003d40 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f001 faa2 	bl	8005260 <USB_CoreReset>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	639a      	str	r2, [r3, #56]	; 0x38
 8003d32:	e005      	b.n	8003d40 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d10b      	bne.n	8003d5e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f043 0206 	orr.w	r2, r3, #6
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f043 0220 	orr.w	r2, r3, #32
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d6a:	b004      	add	sp, #16
 8003d6c:	4770      	bx	lr
	...

08003d70 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d165      	bne.n	8003e50 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4a41      	ldr	r2, [pc, #260]	; (8003e8c <USB_SetTurnaroundTime+0x11c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d906      	bls.n	8003d9a <USB_SetTurnaroundTime+0x2a>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4a40      	ldr	r2, [pc, #256]	; (8003e90 <USB_SetTurnaroundTime+0x120>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d802      	bhi.n	8003d9a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d94:	230f      	movs	r3, #15
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	e062      	b.n	8003e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	4a3c      	ldr	r2, [pc, #240]	; (8003e90 <USB_SetTurnaroundTime+0x120>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d906      	bls.n	8003db0 <USB_SetTurnaroundTime+0x40>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4a3b      	ldr	r2, [pc, #236]	; (8003e94 <USB_SetTurnaroundTime+0x124>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d802      	bhi.n	8003db0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003daa:	230e      	movs	r3, #14
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	e057      	b.n	8003e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4a38      	ldr	r2, [pc, #224]	; (8003e94 <USB_SetTurnaroundTime+0x124>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d906      	bls.n	8003dc6 <USB_SetTurnaroundTime+0x56>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4a37      	ldr	r2, [pc, #220]	; (8003e98 <USB_SetTurnaroundTime+0x128>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d802      	bhi.n	8003dc6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003dc0:	230d      	movs	r3, #13
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	e04c      	b.n	8003e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4a33      	ldr	r2, [pc, #204]	; (8003e98 <USB_SetTurnaroundTime+0x128>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d906      	bls.n	8003ddc <USB_SetTurnaroundTime+0x6c>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	4a32      	ldr	r2, [pc, #200]	; (8003e9c <USB_SetTurnaroundTime+0x12c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d802      	bhi.n	8003ddc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003dd6:	230c      	movs	r3, #12
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	e041      	b.n	8003e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4a2f      	ldr	r2, [pc, #188]	; (8003e9c <USB_SetTurnaroundTime+0x12c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d906      	bls.n	8003df2 <USB_SetTurnaroundTime+0x82>
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4a2e      	ldr	r2, [pc, #184]	; (8003ea0 <USB_SetTurnaroundTime+0x130>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d802      	bhi.n	8003df2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003dec:	230b      	movs	r3, #11
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	e036      	b.n	8003e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	4a2a      	ldr	r2, [pc, #168]	; (8003ea0 <USB_SetTurnaroundTime+0x130>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d906      	bls.n	8003e08 <USB_SetTurnaroundTime+0x98>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	4a29      	ldr	r2, [pc, #164]	; (8003ea4 <USB_SetTurnaroundTime+0x134>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d802      	bhi.n	8003e08 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003e02:	230a      	movs	r3, #10
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	e02b      	b.n	8003e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4a26      	ldr	r2, [pc, #152]	; (8003ea4 <USB_SetTurnaroundTime+0x134>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d906      	bls.n	8003e1e <USB_SetTurnaroundTime+0xae>
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4a25      	ldr	r2, [pc, #148]	; (8003ea8 <USB_SetTurnaroundTime+0x138>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d802      	bhi.n	8003e1e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003e18:	2309      	movs	r3, #9
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	e020      	b.n	8003e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	4a21      	ldr	r2, [pc, #132]	; (8003ea8 <USB_SetTurnaroundTime+0x138>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d906      	bls.n	8003e34 <USB_SetTurnaroundTime+0xc4>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	4a20      	ldr	r2, [pc, #128]	; (8003eac <USB_SetTurnaroundTime+0x13c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d802      	bhi.n	8003e34 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003e2e:	2308      	movs	r3, #8
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	e015      	b.n	8003e60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4a1d      	ldr	r2, [pc, #116]	; (8003eac <USB_SetTurnaroundTime+0x13c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d906      	bls.n	8003e4a <USB_SetTurnaroundTime+0xda>
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	4a1c      	ldr	r2, [pc, #112]	; (8003eb0 <USB_SetTurnaroundTime+0x140>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d802      	bhi.n	8003e4a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003e44:	2307      	movs	r3, #7
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	e00a      	b.n	8003e60 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003e4a:	2306      	movs	r3, #6
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e007      	b.n	8003e60 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d102      	bne.n	8003e5c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003e56:	2309      	movs	r3, #9
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	e001      	b.n	8003e60 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003e5c:	2309      	movs	r3, #9
 8003e5e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	029b      	lsls	r3, r3, #10
 8003e74:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	371c      	adds	r7, #28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	00d8acbf 	.word	0x00d8acbf
 8003e90:	00e4e1bf 	.word	0x00e4e1bf
 8003e94:	00f423ff 	.word	0x00f423ff
 8003e98:	0106737f 	.word	0x0106737f
 8003e9c:	011a499f 	.word	0x011a499f
 8003ea0:	01312cff 	.word	0x01312cff
 8003ea4:	014ca43f 	.word	0x014ca43f
 8003ea8:	016e35ff 	.word	0x016e35ff
 8003eac:	01a6ab1f 	.word	0x01a6ab1f
 8003eb0:	01e847ff 	.word	0x01e847ff

08003eb4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f043 0201 	orr.w	r2, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f023 0201 	bic.w	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d106      	bne.n	8003f24 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	e00b      	b.n	8003f3c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	60da      	str	r2, [r3, #12]
 8003f36:	e001      	b.n	8003f3c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e003      	b.n	8003f44 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003f3c:	2032      	movs	r0, #50	; 0x32
 8003f3e:	f7fc fddf 	bl	8000b00 <HAL_Delay>

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b086      	sub	sp, #24
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f66:	2300      	movs	r3, #0
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	e009      	b.n	8003f80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	3340      	adds	r3, #64	; 0x40
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	2200      	movs	r2, #0
 8003f78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	2b0e      	cmp	r3, #14
 8003f84:	d9f2      	bls.n	8003f6c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d11c      	bne.n	8003fc6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f9a:	f043 0302 	orr.w	r3, r3, #2
 8003f9e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	e005      	b.n	8003fd2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fd8:	461a      	mov	r2, r3
 8003fda:	2300      	movs	r3, #0
 8003fdc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fec:	461a      	mov	r2, r3
 8003fee:	680b      	ldr	r3, [r1, #0]
 8003ff0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d10c      	bne.n	8004012 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d104      	bne.n	8004008 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ffe:	2100      	movs	r1, #0
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f949 	bl	8004298 <USB_SetDevSpeed>
 8004006:	e008      	b.n	800401a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004008:	2101      	movs	r1, #1
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f944 	bl	8004298 <USB_SetDevSpeed>
 8004010:	e003      	b.n	800401a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004012:	2103      	movs	r1, #3
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f93f 	bl	8004298 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800401a:	2110      	movs	r1, #16
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f8f3 	bl	8004208 <USB_FlushTxFifo>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f911 	bl	8004254 <USB_FlushRxFifo>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004042:	461a      	mov	r2, r3
 8004044:	2300      	movs	r3, #0
 8004046:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404e:	461a      	mov	r2, r3
 8004050:	2300      	movs	r3, #0
 8004052:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405a:	461a      	mov	r2, r3
 800405c:	2300      	movs	r3, #0
 800405e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	e043      	b.n	80040ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004078:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800407c:	d118      	bne.n	80040b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004090:	461a      	mov	r2, r3
 8004092:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	e013      	b.n	80040c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a6:	461a      	mov	r2, r3
 80040a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	e008      	b.n	80040c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040bc:	461a      	mov	r2, r3
 80040be:	2300      	movs	r3, #0
 80040c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ce:	461a      	mov	r2, r3
 80040d0:	2300      	movs	r3, #0
 80040d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e0:	461a      	mov	r2, r3
 80040e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	3301      	adds	r3, #1
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d3b7      	bcc.n	8004066 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	e043      	b.n	8004184 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800410e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004112:	d118      	bne.n	8004146 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004126:	461a      	mov	r2, r3
 8004128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	e013      	b.n	8004158 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413c:	461a      	mov	r2, r3
 800413e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	e008      	b.n	8004158 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004152:	461a      	mov	r2, r3
 8004154:	2300      	movs	r3, #0
 8004156:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004164:	461a      	mov	r2, r3
 8004166:	2300      	movs	r3, #0
 8004168:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004176:	461a      	mov	r2, r3
 8004178:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800417c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	3301      	adds	r3, #1
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	429a      	cmp	r2, r3
 800418a:	d3b7      	bcc.n	80040fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800419a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800419e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80041ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d105      	bne.n	80041c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f043 0210 	orr.w	r2, r3, #16
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699a      	ldr	r2, [r3, #24]
 80041c4:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <USB_DevInit+0x2b8>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d005      	beq.n	80041de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f043 0208 	orr.w	r2, r3, #8
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d107      	bne.n	80041f4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041ec:	f043 0304 	orr.w	r3, r3, #4
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004200:	b004      	add	sp, #16
 8004202:	4770      	bx	lr
 8004204:	803c3800 	.word	0x803c3800

08004208 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	019b      	lsls	r3, r3, #6
 800421a:	f043 0220 	orr.w	r2, r3, #32
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3301      	adds	r3, #1
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4a09      	ldr	r2, [pc, #36]	; (8004250 <USB_FlushTxFifo+0x48>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d901      	bls.n	8004234 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e006      	b.n	8004242 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b20      	cmp	r3, #32
 800423e:	d0f0      	beq.n	8004222 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	00030d40 	.word	0x00030d40

08004254 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2210      	movs	r2, #16
 8004264:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3301      	adds	r3, #1
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a09      	ldr	r2, [pc, #36]	; (8004294 <USB_FlushRxFifo+0x40>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d901      	bls.n	8004278 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e006      	b.n	8004286 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	2b10      	cmp	r3, #16
 8004282:	d0f0      	beq.n	8004266 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	00030d40 	.word	0x00030d40

08004298 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	68f9      	ldr	r1, [r7, #12]
 80042b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042b8:	4313      	orrs	r3, r2
 80042ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b087      	sub	sp, #28
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 0306 	and.w	r3, r3, #6
 80042e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80042ea:	2300      	movs	r3, #0
 80042ec:	75fb      	strb	r3, [r7, #23]
 80042ee:	e00a      	b.n	8004306 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d002      	beq.n	80042fc <USB_GetDevSpeed+0x32>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2b06      	cmp	r3, #6
 80042fa:	d102      	bne.n	8004302 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80042fc:	2302      	movs	r3, #2
 80042fe:	75fb      	strb	r3, [r7, #23]
 8004300:	e001      	b.n	8004306 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004302:	230f      	movs	r3, #15
 8004304:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004306:	7dfb      	ldrb	r3, [r7, #23]
}
 8004308:	4618      	mov	r0, r3
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	785b      	ldrb	r3, [r3, #1]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d13a      	bne.n	80043a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004336:	69da      	ldr	r2, [r3, #28]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	2101      	movs	r1, #1
 8004342:	fa01 f303 	lsl.w	r3, r1, r3
 8004346:	b29b      	uxth	r3, r3
 8004348:	68f9      	ldr	r1, [r7, #12]
 800434a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800434e:	4313      	orrs	r3, r2
 8004350:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d155      	bne.n	8004414 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	78db      	ldrb	r3, [r3, #3]
 8004382:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004384:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	059b      	lsls	r3, r3, #22
 800438a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800438c:	4313      	orrs	r3, r2
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	0151      	lsls	r1, r2, #5
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	440a      	add	r2, r1
 8004396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800439a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800439e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	e036      	b.n	8004414 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ac:	69da      	ldr	r2, [r3, #28]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	2101      	movs	r1, #1
 80043b8:	fa01 f303 	lsl.w	r3, r1, r3
 80043bc:	041b      	lsls	r3, r3, #16
 80043be:	68f9      	ldr	r1, [r7, #12]
 80043c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043c4:	4313      	orrs	r3, r2
 80043c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d11a      	bne.n	8004414 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	78db      	ldrb	r3, [r3, #3]
 80043f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043fa:	430b      	orrs	r3, r1
 80043fc:	4313      	orrs	r3, r2
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	0151      	lsls	r1, r2, #5
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	440a      	add	r2, r1
 8004406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800440a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004412:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	785b      	ldrb	r3, [r3, #1]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d161      	bne.n	8004504 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004452:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004456:	d11f      	bne.n	8004498 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	0151      	lsls	r1, r2, #5
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	440a      	add	r2, r1
 800446e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004472:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004476:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	0151      	lsls	r1, r2, #5
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	440a      	add	r2, r1
 800448e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004492:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004496:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800449e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	f003 030f 	and.w	r3, r3, #15
 80044a8:	2101      	movs	r1, #1
 80044aa:	fa01 f303 	lsl.w	r3, r1, r3
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	43db      	mvns	r3, r3
 80044b2:	68f9      	ldr	r1, [r7, #12]
 80044b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044b8:	4013      	ands	r3, r2
 80044ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	2101      	movs	r1, #1
 80044ce:	fa01 f303 	lsl.w	r3, r1, r3
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	68f9      	ldr	r1, [r7, #12]
 80044d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044dc:	4013      	ands	r3, r2
 80044de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	0159      	lsls	r1, r3, #5
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	440b      	add	r3, r1
 80044f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fa:	4619      	mov	r1, r3
 80044fc:	4b35      	ldr	r3, [pc, #212]	; (80045d4 <USB_DeactivateEndpoint+0x1b0>)
 80044fe:	4013      	ands	r3, r2
 8004500:	600b      	str	r3, [r1, #0]
 8004502:	e060      	b.n	80045c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800451a:	d11f      	bne.n	800455c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	0151      	lsls	r1, r2, #5
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	440a      	add	r2, r1
 8004532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004536:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800453a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	0151      	lsls	r1, r2, #5
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	440a      	add	r2, r1
 8004552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004556:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800455a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	2101      	movs	r1, #1
 800456e:	fa01 f303 	lsl.w	r3, r1, r3
 8004572:	041b      	lsls	r3, r3, #16
 8004574:	43db      	mvns	r3, r3
 8004576:	68f9      	ldr	r1, [r7, #12]
 8004578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800457c:	4013      	ands	r3, r2
 800457e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	2101      	movs	r1, #1
 8004592:	fa01 f303 	lsl.w	r3, r1, r3
 8004596:	041b      	lsls	r3, r3, #16
 8004598:	43db      	mvns	r3, r3
 800459a:	68f9      	ldr	r1, [r7, #12]
 800459c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045a0:	4013      	ands	r3, r2
 80045a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	0159      	lsls	r1, r3, #5
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	440b      	add	r3, r1
 80045ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045be:	4619      	mov	r1, r3
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <USB_DeactivateEndpoint+0x1b4>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	ec337800 	.word	0xec337800
 80045d8:	eff37800 	.word	0xeff37800

080045dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08a      	sub	sp, #40	; 0x28
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	4613      	mov	r3, r2
 80045e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	785b      	ldrb	r3, [r3, #1]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	f040 815c 	bne.w	80048b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d132      	bne.n	800466c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	0151      	lsls	r1, r2, #5
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	440a      	add	r2, r1
 800461c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004620:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004624:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004628:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	0151      	lsls	r1, r2, #5
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	440a      	add	r2, r1
 8004640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004644:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004648:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	0151      	lsls	r1, r2, #5
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	440a      	add	r2, r1
 8004660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004664:	0cdb      	lsrs	r3, r3, #19
 8004666:	04db      	lsls	r3, r3, #19
 8004668:	6113      	str	r3, [r2, #16]
 800466a:	e074      	b.n	8004756 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	0151      	lsls	r1, r2, #5
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	440a      	add	r2, r1
 8004682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004686:	0cdb      	lsrs	r3, r3, #19
 8004688:	04db      	lsls	r3, r3, #19
 800468a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	0151      	lsls	r1, r2, #5
 800469e:	69fa      	ldr	r2, [r7, #28]
 80046a0:	440a      	add	r2, r1
 80046a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	6959      	ldr	r1, [r3, #20]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	440b      	add	r3, r1
 80046c8:	1e59      	subs	r1, r3, #1
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80046d2:	04d9      	lsls	r1, r3, #19
 80046d4:	4b9d      	ldr	r3, [pc, #628]	; (800494c <USB_EPStartXfer+0x370>)
 80046d6:	400b      	ands	r3, r1
 80046d8:	69b9      	ldr	r1, [r7, #24]
 80046da:	0148      	lsls	r0, r1, #5
 80046dc:	69f9      	ldr	r1, [r7, #28]
 80046de:	4401      	add	r1, r0
 80046e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046e4:	4313      	orrs	r3, r2
 80046e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046fe:	69b9      	ldr	r1, [r7, #24]
 8004700:	0148      	lsls	r0, r1, #5
 8004702:	69f9      	ldr	r1, [r7, #28]
 8004704:	4401      	add	r1, r0
 8004706:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800470a:	4313      	orrs	r3, r2
 800470c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	78db      	ldrb	r3, [r3, #3]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d11f      	bne.n	8004756 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	0151      	lsls	r1, r2, #5
 8004728:	69fa      	ldr	r2, [r7, #28]
 800472a:	440a      	add	r2, r1
 800472c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004730:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004734:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	0151      	lsls	r1, r2, #5
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	440a      	add	r2, r1
 800474c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004750:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004754:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d14b      	bne.n	80047f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d009      	beq.n	8004778 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004770:	461a      	mov	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	78db      	ldrb	r3, [r3, #3]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d128      	bne.n	80047d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d110      	bne.n	80047b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	0151      	lsls	r1, r2, #5
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	440a      	add	r2, r1
 80047a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	e00f      	b.n	80047d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	0151      	lsls	r1, r2, #5
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	440a      	add	r2, r1
 80047c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	0151      	lsls	r1, r2, #5
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	440a      	add	r2, r1
 80047e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	e12f      	b.n	8004a54 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	0151      	lsls	r1, r2, #5
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	440a      	add	r2, r1
 800480a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800480e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004812:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	78db      	ldrb	r3, [r3, #3]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d015      	beq.n	8004848 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8117 	beq.w	8004a54 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	2101      	movs	r1, #1
 8004838:	fa01 f303 	lsl.w	r3, r1, r3
 800483c:	69f9      	ldr	r1, [r7, #28]
 800483e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004842:	4313      	orrs	r3, r2
 8004844:	634b      	str	r3, [r1, #52]	; 0x34
 8004846:	e105      	b.n	8004a54 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d110      	bne.n	800487a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	0151      	lsls	r1, r2, #5
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	440a      	add	r2, r1
 800486e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004872:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	e00f      	b.n	800489a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	0151      	lsls	r1, r2, #5
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	440a      	add	r2, r1
 8004890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004898:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	68d9      	ldr	r1, [r3, #12]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	781a      	ldrb	r2, [r3, #0]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	b298      	uxth	r0, r3
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	4603      	mov	r3, r0
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 fa2b 	bl	8004d0a <USB_WritePacket>
 80048b4:	e0ce      	b.n	8004a54 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	0151      	lsls	r1, r2, #5
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	440a      	add	r2, r1
 80048cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d0:	0cdb      	lsrs	r3, r3, #19
 80048d2:	04db      	lsls	r3, r3, #19
 80048d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	0151      	lsls	r1, r2, #5
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	440a      	add	r2, r1
 80048ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d126      	bne.n	8004950 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004918:	69b9      	ldr	r1, [r7, #24]
 800491a:	0148      	lsls	r0, r1, #5
 800491c:	69f9      	ldr	r1, [r7, #28]
 800491e:	4401      	add	r1, r0
 8004920:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004924:	4313      	orrs	r3, r2
 8004926:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004942:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004946:	6113      	str	r3, [r2, #16]
 8004948:	e036      	b.n	80049b8 <USB_EPStartXfer+0x3dc>
 800494a:	bf00      	nop
 800494c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	695a      	ldr	r2, [r3, #20]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4413      	add	r3, r2
 800495a:	1e5a      	subs	r2, r3, #1
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	fbb2 f3f3 	udiv	r3, r2, r3
 8004964:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	8afb      	ldrh	r3, [r7, #22]
 8004976:	04d9      	lsls	r1, r3, #19
 8004978:	4b39      	ldr	r3, [pc, #228]	; (8004a60 <USB_EPStartXfer+0x484>)
 800497a:	400b      	ands	r3, r1
 800497c:	69b9      	ldr	r1, [r7, #24]
 800497e:	0148      	lsls	r0, r1, #5
 8004980:	69f9      	ldr	r1, [r7, #28]
 8004982:	4401      	add	r1, r0
 8004984:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004988:	4313      	orrs	r3, r2
 800498a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	8af9      	ldrh	r1, [r7, #22]
 80049a0:	fb01 f303 	mul.w	r3, r1, r3
 80049a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049a8:	69b9      	ldr	r1, [r7, #24]
 80049aa:	0148      	lsls	r0, r1, #5
 80049ac:	69f9      	ldr	r1, [r7, #28]
 80049ae:	4401      	add	r1, r0
 80049b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049b4:	4313      	orrs	r3, r2
 80049b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80049b8:	79fb      	ldrb	r3, [r7, #7]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d10d      	bne.n	80049da <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d009      	beq.n	80049da <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	68d9      	ldr	r1, [r3, #12]
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d6:	460a      	mov	r2, r1
 80049d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	78db      	ldrb	r3, [r3, #3]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d128      	bne.n	8004a34 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d110      	bne.n	8004a14 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	0151      	lsls	r1, r2, #5
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	440a      	add	r2, r1
 8004a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	e00f      	b.n	8004a34 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	0151      	lsls	r1, r2, #5
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	440a      	add	r2, r1
 8004a2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a32:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	1ff80000 	.word	0x1ff80000

08004a64 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	785b      	ldrb	r3, [r3, #1]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	f040 80cd 	bne.w	8004c20 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d132      	bne.n	8004af4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	0151      	lsls	r1, r2, #5
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	440a      	add	r2, r1
 8004aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004aac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ab0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	0151      	lsls	r1, r2, #5
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	440a      	add	r2, r1
 8004ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004acc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ad0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	0151      	lsls	r1, r2, #5
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	440a      	add	r2, r1
 8004ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aec:	0cdb      	lsrs	r3, r3, #19
 8004aee:	04db      	lsls	r3, r3, #19
 8004af0:	6113      	str	r3, [r2, #16]
 8004af2:	e04e      	b.n	8004b92 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	0151      	lsls	r1, r2, #5
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	440a      	add	r2, r1
 8004b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b0e:	0cdb      	lsrs	r3, r3, #19
 8004b10:	04db      	lsls	r3, r3, #19
 8004b12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	0151      	lsls	r1, r2, #5
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	440a      	add	r2, r1
 8004b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b36:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	695a      	ldr	r2, [r3, #20]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d903      	bls.n	8004b4c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	0151      	lsls	r1, r2, #5
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	440a      	add	r2, r1
 8004b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b78:	691a      	ldr	r2, [r3, #16]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b82:	6939      	ldr	r1, [r7, #16]
 8004b84:	0148      	lsls	r0, r1, #5
 8004b86:	6979      	ldr	r1, [r7, #20]
 8004b88:	4401      	add	r1, r0
 8004b8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d11e      	bne.n	8004bd6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d009      	beq.n	8004bb4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bac:	461a      	mov	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	0151      	lsls	r1, r2, #5
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	440a      	add	r2, r1
 8004bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	e092      	b.n	8004cfc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	0151      	lsls	r1, r2, #5
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	440a      	add	r2, r1
 8004bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bf4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d07e      	beq.n	8004cfc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	2101      	movs	r1, #1
 8004c10:	fa01 f303 	lsl.w	r3, r1, r3
 8004c14:	6979      	ldr	r1, [r7, #20]
 8004c16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	634b      	str	r3, [r1, #52]	; 0x34
 8004c1e:	e06d      	b.n	8004cfc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	0151      	lsls	r1, r2, #5
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	440a      	add	r2, r1
 8004c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c3a:	0cdb      	lsrs	r3, r3, #19
 8004c3c:	04db      	lsls	r3, r3, #19
 8004c3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	0151      	lsls	r1, r2, #5
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	440a      	add	r2, r1
 8004c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c62:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	0151      	lsls	r1, r2, #5
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	440a      	add	r2, r1
 8004c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004caa:	6939      	ldr	r1, [r7, #16]
 8004cac:	0148      	lsls	r0, r1, #5
 8004cae:	6979      	ldr	r1, [r7, #20]
 8004cb0:	4401      	add	r1, r0
 8004cb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d10d      	bne.n	8004cdc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d009      	beq.n	8004cdc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	68d9      	ldr	r1, [r3, #12]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd8:	460a      	mov	r2, r1
 8004cda:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	0151      	lsls	r1, r2, #5
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	440a      	add	r2, r1
 8004cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b089      	sub	sp, #36	; 0x24
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	4611      	mov	r1, r2
 8004d16:	461a      	mov	r2, r3
 8004d18:	460b      	mov	r3, r1
 8004d1a:	71fb      	strb	r3, [r7, #7]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004d28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d11a      	bne.n	8004d66 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d30:	88bb      	ldrh	r3, [r7, #4]
 8004d32:	3303      	adds	r3, #3
 8004d34:	089b      	lsrs	r3, r3, #2
 8004d36:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d38:	2300      	movs	r3, #0
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	e00f      	b.n	8004d5e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	031a      	lsls	r2, r3, #12
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	3304      	adds	r3, #4
 8004d56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d3eb      	bcc.n	8004d3e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3724      	adds	r7, #36	; 0x24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b089      	sub	sp, #36	; 0x24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	3303      	adds	r3, #3
 8004d8e:	089b      	lsrs	r3, r3, #2
 8004d90:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004d92:	2300      	movs	r3, #0
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	e00b      	b.n	8004db0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	601a      	str	r2, [r3, #0]
    pDest++;
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	3304      	adds	r3, #4
 8004da8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	3301      	adds	r3, #1
 8004dae:	61bb      	str	r3, [r7, #24]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d3ef      	bcc.n	8004d98 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004db8:	69fb      	ldr	r3, [r7, #28]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3724      	adds	r7, #36	; 0x24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b085      	sub	sp, #20
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	785b      	ldrb	r3, [r3, #1]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d12c      	bne.n	8004e3c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	db12      	blt.n	8004e1a <USB_EPSetStall+0x54>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00f      	beq.n	8004e1a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e18:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	0151      	lsls	r1, r2, #5
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	440a      	add	r2, r1
 8004e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	e02b      	b.n	8004e94 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	db12      	blt.n	8004e74 <USB_EPSetStall+0xae>
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00f      	beq.n	8004e74 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	0151      	lsls	r1, r2, #5
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	440a      	add	r2, r1
 8004e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e72:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	785b      	ldrb	r3, [r3, #1]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d128      	bne.n	8004f10 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	0151      	lsls	r1, r2, #5
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	440a      	add	r2, r1
 8004ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004edc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	78db      	ldrb	r3, [r3, #3]
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d003      	beq.n	8004eee <USB_EPClearStall+0x4c>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	78db      	ldrb	r3, [r3, #3]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d138      	bne.n	8004f60 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	0151      	lsls	r1, r2, #5
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	440a      	add	r2, r1
 8004f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	e027      	b.n	8004f60 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	0151      	lsls	r1, r2, #5
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	440a      	add	r2, r1
 8004f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f2e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	78db      	ldrb	r3, [r3, #3]
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d003      	beq.n	8004f40 <USB_EPClearStall+0x9e>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	78db      	ldrb	r3, [r3, #3]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d10f      	bne.n	8004f60 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	0151      	lsls	r1, r2, #5
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	440a      	add	r2, r1
 8004f56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f5e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	460b      	mov	r3, r1
 8004f78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f90:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004fa2:	68f9      	ldr	r1, [r7, #12]
 8004fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fd4:	f023 0302 	bic.w	r3, r3, #2
 8004fd8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004fda:	2003      	movs	r0, #3
 8004fdc:	f7fb fd90 	bl	8000b00 <HAL_Delay>

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005004:	f043 0302 	orr.w	r3, r3, #2
 8005008:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800500a:	2003      	movs	r0, #3
 800500c:	f7fb fd78 	bl	8000b00 <HAL_Delay>

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4013      	ands	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005032:	68fb      	ldr	r3, [r7, #12]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	4013      	ands	r3, r2
 8005062:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	0c1b      	lsrs	r3, r3, #16
}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	4013      	ands	r3, r2
 8005096:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	b29b      	uxth	r3, r3
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	4013      	ands	r3, r2
 80050d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050d6:	68bb      	ldr	r3, [r7, #8]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	460b      	mov	r3, r1
 80050ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005106:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	fa22 f303 	lsr.w	r3, r2, r3
 8005114:	01db      	lsls	r3, r3, #7
 8005116:	b2db      	uxtb	r3, r3
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800511e:	78fb      	ldrb	r3, [r7, #3]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4013      	ands	r3, r2
 8005130:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005132:	68bb      	ldr	r3, [r7, #8]
}
 8005134:	4618      	mov	r0, r3
 8005136:	371c      	adds	r7, #28
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	f003 0301 	and.w	r3, r3, #1
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005176:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800517a:	f023 0307 	bic.w	r3, r3, #7
 800517e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800518e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005192:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
	...

080051a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	460b      	mov	r3, r1
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	333c      	adds	r3, #60	; 0x3c
 80051ba:	3304      	adds	r3, #4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4a26      	ldr	r2, [pc, #152]	; (800525c <USB_EP0_OutStart+0xb8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d90a      	bls.n	80051de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051d8:	d101      	bne.n	80051de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	e037      	b.n	800524e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e4:	461a      	mov	r2, r3
 80051e6:	2300      	movs	r3, #0
 80051e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800520c:	f043 0318 	orr.w	r3, r3, #24
 8005210:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005220:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005224:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005226:	7afb      	ldrb	r3, [r7, #11]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d10f      	bne.n	800524c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005232:	461a      	mov	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005246:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800524a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	4f54300a 	.word	0x4f54300a

08005260 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3301      	adds	r3, #1
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4a13      	ldr	r2, [pc, #76]	; (80052c4 <USB_CoreReset+0x64>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e01b      	b.n	80052b6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	daf2      	bge.n	800526c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f043 0201 	orr.w	r2, r3, #1
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3301      	adds	r3, #1
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4a09      	ldr	r2, [pc, #36]	; (80052c4 <USB_CoreReset+0x64>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d901      	bls.n	80052a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e006      	b.n	80052b6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d0f0      	beq.n	8005296 <USB_CoreReset+0x36>

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	00030d40 	.word	0x00030d40

080052c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	460b      	mov	r3, r1
 80052d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80052d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80052d8:	f002 f986 	bl	80075e8 <malloc>
 80052dc:	4603      	mov	r3, r0
 80052de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d105      	bne.n	80052f2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80052ee:	2302      	movs	r3, #2
 80052f0:	e066      	b.n	80053c0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7c1b      	ldrb	r3, [r3, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d119      	bne.n	8005336 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005306:	2202      	movs	r2, #2
 8005308:	2181      	movs	r1, #129	; 0x81
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f001 ffa5 	bl	800725a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800531a:	2202      	movs	r2, #2
 800531c:	2101      	movs	r1, #1
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f001 ff9b 	bl	800725a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2210      	movs	r2, #16
 8005330:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005334:	e016      	b.n	8005364 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005336:	2340      	movs	r3, #64	; 0x40
 8005338:	2202      	movs	r2, #2
 800533a:	2181      	movs	r1, #129	; 0x81
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f001 ff8c 	bl	800725a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005348:	2340      	movs	r3, #64	; 0x40
 800534a:	2202      	movs	r2, #2
 800534c:	2101      	movs	r1, #1
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f001 ff83 	bl	800725a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2210      	movs	r2, #16
 8005360:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005364:	2308      	movs	r3, #8
 8005366:	2203      	movs	r2, #3
 8005368:	2182      	movs	r1, #130	; 0x82
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f001 ff75 	bl	800725a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	7c1b      	ldrb	r3, [r3, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d109      	bne.n	80053ae <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053a4:	2101      	movs	r1, #1
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f002 f846 	bl	8007438 <USBD_LL_PrepareReceive>
 80053ac:	e007      	b.n	80053be <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053b4:	2340      	movs	r3, #64	; 0x40
 80053b6:	2101      	movs	r1, #1
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f002 f83d 	bl	8007438 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80053d8:	2181      	movs	r1, #129	; 0x81
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f001 ff63 	bl	80072a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80053e6:	2101      	movs	r1, #1
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f001 ff5c 	bl	80072a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80053f6:	2182      	movs	r1, #130	; 0x82
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f001 ff54 	bl	80072a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00e      	beq.n	8005436 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005428:	4618      	mov	r0, r3
 800542a:	f002 f8e5 	bl	80075f8 <free>
    pdev->pClassData = NULL;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005436:	7bfb      	ldrb	r3, [r7, #15]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005450:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005466:	2b00      	cmp	r3, #0
 8005468:	d03a      	beq.n	80054e0 <USBD_CDC_Setup+0xa0>
 800546a:	2b20      	cmp	r3, #32
 800546c:	f040 8097 	bne.w	800559e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	88db      	ldrh	r3, [r3, #6]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d029      	beq.n	80054cc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	b25b      	sxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	da11      	bge.n	80054a6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800548e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	88d2      	ldrh	r2, [r2, #6]
 8005494:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005496:	6939      	ldr	r1, [r7, #16]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	88db      	ldrh	r3, [r3, #6]
 800549c:	461a      	mov	r2, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f001 faaf 	bl	8006a02 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80054a4:	e082      	b.n	80055ac <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	785a      	ldrb	r2, [r3, #1]
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	88db      	ldrh	r3, [r3, #6]
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80054bc:	6939      	ldr	r1, [r7, #16]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	88db      	ldrh	r3, [r3, #6]
 80054c2:	461a      	mov	r2, r3
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f001 fac8 	bl	8006a5a <USBD_CtlPrepareRx>
    break;
 80054ca:	e06f      	b.n	80055ac <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	7850      	ldrb	r0, [r2, #1]
 80054d8:	2200      	movs	r2, #0
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	4798      	blx	r3
    break;
 80054de:	e065      	b.n	80055ac <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	785b      	ldrb	r3, [r3, #1]
 80054e4:	2b0b      	cmp	r3, #11
 80054e6:	d84f      	bhi.n	8005588 <USBD_CDC_Setup+0x148>
 80054e8:	a201      	add	r2, pc, #4	; (adr r2, 80054f0 <USBD_CDC_Setup+0xb0>)
 80054ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ee:	bf00      	nop
 80054f0:	08005521 	.word	0x08005521
 80054f4:	08005597 	.word	0x08005597
 80054f8:	08005589 	.word	0x08005589
 80054fc:	08005589 	.word	0x08005589
 8005500:	08005589 	.word	0x08005589
 8005504:	08005589 	.word	0x08005589
 8005508:	08005589 	.word	0x08005589
 800550c:	08005589 	.word	0x08005589
 8005510:	08005589 	.word	0x08005589
 8005514:	08005589 	.word	0x08005589
 8005518:	08005549 	.word	0x08005549
 800551c:	08005571 	.word	0x08005571
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005526:	2b03      	cmp	r3, #3
 8005528:	d107      	bne.n	800553a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800552a:	f107 030c 	add.w	r3, r7, #12
 800552e:	2202      	movs	r2, #2
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f001 fa65 	bl	8006a02 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005538:	e030      	b.n	800559c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f001 f9ef 	bl	8006920 <USBD_CtlError>
        ret = USBD_FAIL;
 8005542:	2303      	movs	r3, #3
 8005544:	75fb      	strb	r3, [r7, #23]
      break;
 8005546:	e029      	b.n	800559c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800554e:	2b03      	cmp	r3, #3
 8005550:	d107      	bne.n	8005562 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005552:	f107 030f 	add.w	r3, r7, #15
 8005556:	2201      	movs	r2, #1
 8005558:	4619      	mov	r1, r3
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f001 fa51 	bl	8006a02 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005560:	e01c      	b.n	800559c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005562:	6839      	ldr	r1, [r7, #0]
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f001 f9db 	bl	8006920 <USBD_CtlError>
        ret = USBD_FAIL;
 800556a:	2303      	movs	r3, #3
 800556c:	75fb      	strb	r3, [r7, #23]
      break;
 800556e:	e015      	b.n	800559c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005576:	2b03      	cmp	r3, #3
 8005578:	d00f      	beq.n	800559a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800557a:	6839      	ldr	r1, [r7, #0]
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f001 f9cf 	bl	8006920 <USBD_CtlError>
        ret = USBD_FAIL;
 8005582:	2303      	movs	r3, #3
 8005584:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005586:	e008      	b.n	800559a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005588:	6839      	ldr	r1, [r7, #0]
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f001 f9c8 	bl	8006920 <USBD_CtlError>
      ret = USBD_FAIL;
 8005590:	2303      	movs	r3, #3
 8005592:	75fb      	strb	r3, [r7, #23]
      break;
 8005594:	e002      	b.n	800559c <USBD_CDC_Setup+0x15c>
      break;
 8005596:	bf00      	nop
 8005598:	e008      	b.n	80055ac <USBD_CDC_Setup+0x16c>
      break;
 800559a:	bf00      	nop
    }
    break;
 800559c:	e006      	b.n	80055ac <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800559e:	6839      	ldr	r1, [r7, #0]
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f001 f9bd 	bl	8006920 <USBD_CtlError>
    ret = USBD_FAIL;
 80055a6:	2303      	movs	r3, #3
 80055a8:	75fb      	strb	r3, [r7, #23]
    break;
 80055aa:	bf00      	nop
  }

  return (uint8_t)ret;
 80055ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop

080055b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80055ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e049      	b.n	800566e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80055e2:	78fa      	ldrb	r2, [r7, #3]
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	4613      	mov	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	440b      	add	r3, r1
 80055f0:	3318      	adds	r3, #24
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d029      	beq.n	800564c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80055f8:	78fa      	ldrb	r2, [r7, #3]
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	3318      	adds	r3, #24
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	78f9      	ldrb	r1, [r7, #3]
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	460b      	mov	r3, r1
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	1a5b      	subs	r3, r3, r1
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4403      	add	r3, r0
 8005618:	3344      	adds	r3, #68	; 0x44
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005620:	fb03 f301 	mul.w	r3, r3, r1
 8005624:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005626:	2b00      	cmp	r3, #0
 8005628:	d110      	bne.n	800564c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800562a:	78fa      	ldrb	r2, [r7, #3]
 800562c:	6879      	ldr	r1, [r7, #4]
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	440b      	add	r3, r1
 8005638:	3318      	adds	r3, #24
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800563e:	78f9      	ldrb	r1, [r7, #3]
 8005640:	2300      	movs	r3, #0
 8005642:	2200      	movs	r2, #0
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f001 fed6 	bl	80073f6 <USBD_LL_Transmit>
 800564a:	e00f      	b.n	800566c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2200      	movs	r2, #0
 8005650:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005668:	78fa      	ldrb	r2, [r7, #3]
 800566a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	460b      	mov	r3, r1
 8005680:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005688:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005694:	2303      	movs	r3, #3
 8005696:	e015      	b.n	80056c4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	4619      	mov	r1, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f001 feec 	bl	800747a <USBD_LL_GetRxDataSize>
 80056a2:	4602      	mov	r2, r0
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80056be:	4611      	mov	r1, r2
 80056c0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056da:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d015      	beq.n	8005712 <USBD_CDC_EP0_RxReady+0x46>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80056ec:	2bff      	cmp	r3, #255	; 0xff
 80056ee:	d010      	beq.n	8005712 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80056fe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005706:	b292      	uxth	r2, r2
 8005708:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	22ff      	movs	r2, #255	; 0xff
 800570e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2243      	movs	r2, #67	; 0x43
 8005728:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800572a:	4b03      	ldr	r3, [pc, #12]	; (8005738 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800572c:	4618      	mov	r0, r3
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	20000094 	.word	0x20000094

0800573c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2243      	movs	r2, #67	; 0x43
 8005748:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800574a:	4b03      	ldr	r3, [pc, #12]	; (8005758 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800574c:	4618      	mov	r0, r3
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	20000050 	.word	0x20000050

0800575c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2243      	movs	r2, #67	; 0x43
 8005768:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800576a:	4b03      	ldr	r3, [pc, #12]	; (8005778 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	200000d8 	.word	0x200000d8

0800577c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	220a      	movs	r2, #10
 8005788:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800578a:	4b03      	ldr	r3, [pc, #12]	; (8005798 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800578c:	4618      	mov	r0, r3
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	2000000c 	.word	0x2000000c

0800579c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e004      	b.n	80057ba <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b087      	sub	sp, #28
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057d8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005808:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800582e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800583a:	2303      	movs	r3, #3
 800583c:	e016      	b.n	800586c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	7c1b      	ldrb	r3, [r3, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d109      	bne.n	800585a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800584c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005850:	2101      	movs	r1, #1
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f001 fdf0 	bl	8007438 <USBD_LL_PrepareReceive>
 8005858:	e007      	b.n	800586a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005860:	2340      	movs	r3, #64	; 0x40
 8005862:	2101      	movs	r1, #1
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f001 fde7 	bl	8007438 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	4613      	mov	r3, r2
 8005880:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005888:	2303      	movs	r3, #3
 800588a:	e025      	b.n	80058d8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	79fa      	ldrb	r2, [r7, #7]
 80058ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f001 fc5d 	bl	800718c <USBD_LL_Init>
 80058d2:	4603      	mov	r3, r0
 80058d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e010      	b.n	800591a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	f107 020e 	add.w	r2, r7, #14
 800590c:	4610      	mov	r0, r2
 800590e:	4798      	blx	r3
 8005910:	4602      	mov	r2, r0
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b082      	sub	sp, #8
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f001 fc7a 	bl	8007224 <USBD_LL_Start>
 8005930:	4603      	mov	r3, r0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800595c:	2303      	movs	r3, #3
 800595e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d009      	beq.n	800597e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	78fa      	ldrb	r2, [r7, #3]
 8005974:	4611      	mov	r1, r2
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	4798      	blx	r3
 800597a:	4603      	mov	r3, r0
 800597c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800597e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800599a:	2b00      	cmp	r3, #0
 800599c:	d007      	beq.n	80059ae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	78fa      	ldrb	r2, [r7, #3]
 80059a8:	4611      	mov	r1, r2
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	4798      	blx	r3
  }

  return USBD_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 ff6e 	bl	80068ac <USBD_ParseSetupRequest>


  //USBD_HandleTypeDef* pd = ((USBD_HandleTypeDef*)hpcd->pData)->request;
  extern uint16_t usbEventNo;
  extern struct usb_setup_req usbReq[300];
  usbReq[usbEventNo] = pdev->request;
 80059d0:	4b29      	ldr	r3, [pc, #164]	; (8005a78 <USBD_LL_SetupStage+0xc0>)
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	4929      	ldr	r1, [pc, #164]	; (8005a7c <USBD_LL_SetupStage+0xc4>)
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	440b      	add	r3, r1
 80059dc:	f202 22aa 	addw	r2, r2, #682	; 0x2aa
 80059e0:	6811      	ldr	r1, [r2, #0]
 80059e2:	6852      	ldr	r2, [r2, #4]
 80059e4:	6019      	str	r1, [r3, #0]
 80059e6:	605a      	str	r2, [r3, #4]

  pdev->ep0_state = USBD_EP0_SETUP;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80059f6:	461a      	mov	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a04:	f003 031f 	and.w	r3, r3, #31
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d00e      	beq.n	8005a2a <USBD_LL_SetupStage+0x72>
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d302      	bcc.n	8005a16 <USBD_LL_SetupStage+0x5e>
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d014      	beq.n	8005a3e <USBD_LL_SetupStage+0x86>
 8005a14:	e01d      	b.n	8005a52 <USBD_LL_SetupStage+0x9a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fa1c 	bl	8005e5c <USBD_StdDevReq>
 8005a24:	4603      	mov	r3, r0
 8005a26:	73fb      	strb	r3, [r7, #15]
      break;
 8005a28:	e020      	b.n	8005a6c <USBD_LL_SetupStage+0xb4>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fa80 	bl	8005f38 <USBD_StdItfReq>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a3c:	e016      	b.n	8005a6c <USBD_LL_SetupStage+0xb4>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a44:	4619      	mov	r1, r3
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fac4 	bl	8005fd4 <USBD_StdEPReq>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a50:	e00c      	b.n	8005a6c <USBD_LL_SetupStage+0xb4>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f001 fc3f 	bl	80072e4 <USBD_LL_StallEP>
 8005a66:	4603      	mov	r3, r0
 8005a68:	73fb      	strb	r3, [r7, #15]
      break;
 8005a6a:	bf00      	nop
  }

  return ret;
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	20000220 	.word	0x20000220
 8005a7c:	20000714 	.word	0x20000714

08005a80 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	607a      	str	r2, [r7, #4]
 8005a8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005a8e:	7afb      	ldrb	r3, [r7, #11]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d137      	bne.n	8005b04 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d14a      	bne.n	8005b3c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d913      	bls.n	8005ada <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	689a      	ldr	r2, [r3, #8]
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	1ad2      	subs	r2, r2, r3
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	68da      	ldr	r2, [r3, #12]
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	bf28      	it	cs
 8005acc:	4613      	movcs	r3, r2
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 ffde 	bl	8006a94 <USBD_CtlContinueRx>
 8005ad8:	e030      	b.n	8005b3c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005aec:	2b03      	cmp	r3, #3
 8005aee:	d105      	bne.n	8005afc <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 ffda 	bl	8006ab6 <USBD_CtlSendStatus>
 8005b02:	e01b      	b.n	8005b3c <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d013      	beq.n	8005b38 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d10e      	bne.n	8005b38 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	7afa      	ldrb	r2, [r7, #11]
 8005b24:	4611      	mov	r1, r2
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	4798      	blx	r3
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005b2e:	7dfb      	ldrb	r3, [r7, #23]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005b34:	7dfb      	ldrb	r3, [r7, #23]
 8005b36:	e002      	b.n	8005b3e <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e000      	b.n	8005b3e <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b086      	sub	sp, #24
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	460b      	mov	r3, r1
 8005b50:	607a      	str	r2, [r7, #4]
 8005b52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005b54:	7afb      	ldrb	r3, [r7, #11]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d16a      	bne.n	8005c30 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3314      	adds	r3, #20
 8005b5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d155      	bne.n	8005c16 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d914      	bls.n	8005ba0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	1ad2      	subs	r2, r2, r3
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 ff53 	bl	8006a38 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b92:	2300      	movs	r3, #0
 8005b94:	2200      	movs	r2, #0
 8005b96:	2100      	movs	r1, #0
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f001 fc4d 	bl	8007438 <USBD_LL_PrepareReceive>
 8005b9e:	e03a      	b.n	8005c16 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d11c      	bne.n	8005be6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d316      	bcc.n	8005be6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d20f      	bcs.n	8005be6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2100      	movs	r1, #0
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 ff34 	bl	8006a38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bd8:	2300      	movs	r3, #0
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2100      	movs	r1, #0
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f001 fc2a 	bl	8007438 <USBD_LL_PrepareReceive>
 8005be4:	e017      	b.n	8005c16 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d105      	bne.n	8005c08 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c08:	2180      	movs	r1, #128	; 0x80
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f001 fb6a 	bl	80072e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 ff63 	bl	8006adc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d123      	bne.n	8005c68 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f7ff fe8a 	bl	800593a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c2e:	e01b      	b.n	8005c68 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d013      	beq.n	8005c64 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d10e      	bne.n	8005c64 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	7afa      	ldrb	r2, [r7, #11]
 8005c50:	4611      	mov	r1, r2
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	4798      	blx	r3
 8005c56:	4603      	mov	r3, r0
 8005c58:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
 8005c62:	e002      	b.n	8005c6a <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e000      	b.n	8005c6a <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b082      	sub	sp, #8
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d009      	beq.n	8005cb6 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6852      	ldr	r2, [r2, #4]
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cb6:	2340      	movs	r3, #64	; 0x40
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2100      	movs	r1, #0
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f001 facc 	bl	800725a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2240      	movs	r2, #64	; 0x40
 8005cce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cd2:	2340      	movs	r3, #64	; 0x40
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2180      	movs	r1, #128	; 0x80
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f001 fabe 	bl	800725a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2240      	movs	r2, #64	; 0x40
 8005ce8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	78fa      	ldrb	r2, [r7, #3]
 8005d04:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2204      	movs	r2, #4
 8005d2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d4c:	2b04      	cmp	r3, #4
 8005d4e:	d105      	bne.n	8005d5c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b082      	sub	sp, #8
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d10b      	bne.n	8005d94 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d005      	beq.n	8005d94 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	460b      	mov	r3, r1
 8005da8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6852      	ldr	r2, [r2, #4]
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	4611      	mov	r1, r2
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	4798      	blx	r3
  }

  return USBD_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	3301      	adds	r3, #1
 8005e36:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005e3e:	8a3b      	ldrh	r3, [r7, #16]
 8005e40:	021b      	lsls	r3, r3, #8
 8005e42:	b21a      	sxth	r2, r3
 8005e44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	b21b      	sxth	r3, r3
 8005e4c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005e4e:	89fb      	ldrh	r3, [r7, #14]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	d004      	beq.n	8005e80 <USBD_StdDevReq+0x24>
 8005e76:	2b40      	cmp	r3, #64	; 0x40
 8005e78:	d002      	beq.n	8005e80 <USBD_StdDevReq+0x24>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <USBD_StdDevReq+0x38>
 8005e7e:	e050      	b.n	8005f22 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	6839      	ldr	r1, [r7, #0]
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4798      	blx	r3
 8005e8e:	4603      	mov	r3, r0
 8005e90:	73fb      	strb	r3, [r7, #15]
    break;
 8005e92:	e04b      	b.n	8005f2c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	785b      	ldrb	r3, [r3, #1]
 8005e98:	2b09      	cmp	r3, #9
 8005e9a:	d83c      	bhi.n	8005f16 <USBD_StdDevReq+0xba>
 8005e9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <USBD_StdDevReq+0x48>)
 8005e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea2:	bf00      	nop
 8005ea4:	08005ef9 	.word	0x08005ef9
 8005ea8:	08005f0d 	.word	0x08005f0d
 8005eac:	08005f17 	.word	0x08005f17
 8005eb0:	08005f03 	.word	0x08005f03
 8005eb4:	08005f17 	.word	0x08005f17
 8005eb8:	08005ed7 	.word	0x08005ed7
 8005ebc:	08005ecd 	.word	0x08005ecd
 8005ec0:	08005f17 	.word	0x08005f17
 8005ec4:	08005eef 	.word	0x08005eef
 8005ec8:	08005ee1 	.word	0x08005ee1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005ecc:	6839      	ldr	r1, [r7, #0]
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f9d6 	bl	8006280 <USBD_GetDescriptor>
      break;
 8005ed4:	e024      	b.n	8005f20 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005ed6:	6839      	ldr	r1, [r7, #0]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fb65 	bl	80065a8 <USBD_SetAddress>
      break;
 8005ede:	e01f      	b.n	8005f20 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fba2 	bl	800662c <USBD_SetConfig>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	73fb      	strb	r3, [r7, #15]
      break;
 8005eec:	e018      	b.n	8005f20 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fc3f 	bl	8006774 <USBD_GetConfig>
      break;
 8005ef6:	e013      	b.n	8005f20 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fc6e 	bl	80067dc <USBD_GetStatus>
      break;
 8005f00:	e00e      	b.n	8005f20 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005f02:	6839      	ldr	r1, [r7, #0]
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fc9c 	bl	8006842 <USBD_SetFeature>
      break;
 8005f0a:	e009      	b.n	8005f20 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005f0c:	6839      	ldr	r1, [r7, #0]
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fcab 	bl	800686a <USBD_ClrFeature>
      break;
 8005f14:	e004      	b.n	8005f20 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005f16:	6839      	ldr	r1, [r7, #0]
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fd01 	bl	8006920 <USBD_CtlError>
      break;
 8005f1e:	bf00      	nop
    }
    break;
 8005f20:	e004      	b.n	8005f2c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fcfb 	bl	8006920 <USBD_CtlError>
    break;
 8005f2a:	bf00      	nop
  }

  return ret;
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop

08005f38 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	73fb      	strb	r3, [r7, #15]

  extern uint16_t usbEventNo;
  if (usbEventNo > 74) {
 8005f46:	4b22      	ldr	r3, [pc, #136]	; (8005fd0 <USBD_StdItfReq+0x98>)
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	2b4a      	cmp	r3, #74	; 0x4a
 8005f4c:	d901      	bls.n	8005f52 <USBD_StdItfReq+0x1a>
	  int susp = 1;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	60bb      	str	r3, [r7, #8]
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f5a:	2b20      	cmp	r3, #32
 8005f5c:	d003      	beq.n	8005f66 <USBD_StdItfReq+0x2e>
 8005f5e:	2b40      	cmp	r3, #64	; 0x40
 8005f60:	d001      	beq.n	8005f66 <USBD_StdItfReq+0x2e>
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d12a      	bne.n	8005fbc <USBD_StdItfReq+0x84>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d81d      	bhi.n	8005fae <USBD_StdItfReq+0x76>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	889b      	ldrh	r3, [r3, #4]
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d813      	bhi.n	8005fa4 <USBD_StdItfReq+0x6c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	4798      	blx	r3
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	88db      	ldrh	r3, [r3, #6]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d110      	bne.n	8005fb8 <USBD_StdItfReq+0x80>
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10d      	bne.n	8005fb8 <USBD_StdItfReq+0x80>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fd8a 	bl	8006ab6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005fa2:	e009      	b.n	8005fb8 <USBD_StdItfReq+0x80>
        USBD_CtlError(pdev, req);
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fcba 	bl	8006920 <USBD_CtlError>
      break;
 8005fac:	e004      	b.n	8005fb8 <USBD_StdItfReq+0x80>

    default:
      USBD_CtlError(pdev, req);
 8005fae:	6839      	ldr	r1, [r7, #0]
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fcb5 	bl	8006920 <USBD_CtlError>
      break;
 8005fb6:	e000      	b.n	8005fba <USBD_StdItfReq+0x82>
      break;
 8005fb8:	bf00      	nop
    }
    break;
 8005fba:	e004      	b.n	8005fc6 <USBD_StdItfReq+0x8e>

  default:
    USBD_CtlError(pdev, req);
 8005fbc:	6839      	ldr	r1, [r7, #0]
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fcae 	bl	8006920 <USBD_CtlError>
    break;
 8005fc4:	bf00      	nop
  }

  return ret;
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	20000220 	.word	0x20000220

08005fd4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	889b      	ldrh	r3, [r3, #4]
 8005fe6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ff0:	2b20      	cmp	r3, #32
 8005ff2:	d004      	beq.n	8005ffe <USBD_StdEPReq+0x2a>
 8005ff4:	2b40      	cmp	r3, #64	; 0x40
 8005ff6:	d002      	beq.n	8005ffe <USBD_StdEPReq+0x2a>
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <USBD_StdEPReq+0x3e>
 8005ffc:	e135      	b.n	800626a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	6839      	ldr	r1, [r7, #0]
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	4798      	blx	r3
 800600c:	4603      	mov	r3, r0
 800600e:	73fb      	strb	r3, [r7, #15]
    break;
 8006010:	e130      	b.n	8006274 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	785b      	ldrb	r3, [r3, #1]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d03e      	beq.n	8006098 <USBD_StdEPReq+0xc4>
 800601a:	2b03      	cmp	r3, #3
 800601c:	d002      	beq.n	8006024 <USBD_StdEPReq+0x50>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d077      	beq.n	8006112 <USBD_StdEPReq+0x13e>
 8006022:	e11c      	b.n	800625e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800602a:	2b02      	cmp	r3, #2
 800602c:	d002      	beq.n	8006034 <USBD_StdEPReq+0x60>
 800602e:	2b03      	cmp	r3, #3
 8006030:	d015      	beq.n	800605e <USBD_StdEPReq+0x8a>
 8006032:	e02b      	b.n	800608c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006034:	7bbb      	ldrb	r3, [r7, #14]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00c      	beq.n	8006054 <USBD_StdEPReq+0x80>
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	2b80      	cmp	r3, #128	; 0x80
 800603e:	d009      	beq.n	8006054 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006040:	7bbb      	ldrb	r3, [r7, #14]
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f001 f94d 	bl	80072e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800604a:	2180      	movs	r1, #128	; 0x80
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 f949 	bl	80072e4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006052:	e020      	b.n	8006096 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fc62 	bl	8006920 <USBD_CtlError>
        break;
 800605c:	e01b      	b.n	8006096 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	885b      	ldrh	r3, [r3, #2]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10e      	bne.n	8006084 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006066:	7bbb      	ldrb	r3, [r7, #14]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00b      	beq.n	8006084 <USBD_StdEPReq+0xb0>
 800606c:	7bbb      	ldrb	r3, [r7, #14]
 800606e:	2b80      	cmp	r3, #128	; 0x80
 8006070:	d008      	beq.n	8006084 <USBD_StdEPReq+0xb0>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	88db      	ldrh	r3, [r3, #6]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d104      	bne.n	8006084 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800607a:	7bbb      	ldrb	r3, [r7, #14]
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f001 f930 	bl	80072e4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fd16 	bl	8006ab6 <USBD_CtlSendStatus>

        break;
 800608a:	e004      	b.n	8006096 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fc46 	bl	8006920 <USBD_CtlError>
        break;
 8006094:	bf00      	nop
      }
      break;
 8006096:	e0e7      	b.n	8006268 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d002      	beq.n	80060a8 <USBD_StdEPReq+0xd4>
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d015      	beq.n	80060d2 <USBD_StdEPReq+0xfe>
 80060a6:	e02d      	b.n	8006104 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060a8:	7bbb      	ldrb	r3, [r7, #14]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00c      	beq.n	80060c8 <USBD_StdEPReq+0xf4>
 80060ae:	7bbb      	ldrb	r3, [r7, #14]
 80060b0:	2b80      	cmp	r3, #128	; 0x80
 80060b2:	d009      	beq.n	80060c8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80060b4:	7bbb      	ldrb	r3, [r7, #14]
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f001 f913 	bl	80072e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060be:	2180      	movs	r1, #128	; 0x80
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f001 f90f 	bl	80072e4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80060c6:	e023      	b.n	8006110 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fc28 	bl	8006920 <USBD_CtlError>
        break;
 80060d0:	e01e      	b.n	8006110 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	885b      	ldrh	r3, [r3, #2]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d119      	bne.n	800610e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80060da:	7bbb      	ldrb	r3, [r7, #14]
 80060dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d004      	beq.n	80060ee <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80060e4:	7bbb      	ldrb	r3, [r7, #14]
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f001 f91a 	bl	8007322 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fce1 	bl	8006ab6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	4798      	blx	r3
        }
        break;
 8006102:	e004      	b.n	800610e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fc0a 	bl	8006920 <USBD_CtlError>
        break;
 800610c:	e000      	b.n	8006110 <USBD_StdEPReq+0x13c>
        break;
 800610e:	bf00      	nop
      }
      break;
 8006110:	e0aa      	b.n	8006268 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006118:	2b02      	cmp	r3, #2
 800611a:	d002      	beq.n	8006122 <USBD_StdEPReq+0x14e>
 800611c:	2b03      	cmp	r3, #3
 800611e:	d032      	beq.n	8006186 <USBD_StdEPReq+0x1b2>
 8006120:	e097      	b.n	8006252 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006122:	7bbb      	ldrb	r3, [r7, #14]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d007      	beq.n	8006138 <USBD_StdEPReq+0x164>
 8006128:	7bbb      	ldrb	r3, [r7, #14]
 800612a:	2b80      	cmp	r3, #128	; 0x80
 800612c:	d004      	beq.n	8006138 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fbf5 	bl	8006920 <USBD_CtlError>
          break;
 8006136:	e091      	b.n	800625c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006138:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800613c:	2b00      	cmp	r3, #0
 800613e:	da0b      	bge.n	8006158 <USBD_StdEPReq+0x184>
 8006140:	7bbb      	ldrb	r3, [r7, #14]
 8006142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	3310      	adds	r3, #16
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	4413      	add	r3, r2
 8006154:	3304      	adds	r3, #4
 8006156:	e00b      	b.n	8006170 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006158:	7bbb      	ldrb	r3, [r7, #14]
 800615a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	4413      	add	r3, r2
 800616e:	3304      	adds	r3, #4
 8006170:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2202      	movs	r2, #2
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fc3f 	bl	8006a02 <USBD_CtlSendData>
        break;
 8006184:	e06a      	b.n	800625c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006186:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800618a:	2b00      	cmp	r3, #0
 800618c:	da11      	bge.n	80061b2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800618e:	7bbb      	ldrb	r3, [r7, #14]
 8006190:	f003 020f 	and.w	r2, r3, #15
 8006194:	6879      	ldr	r1, [r7, #4]
 8006196:	4613      	mov	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	440b      	add	r3, r1
 80061a0:	3324      	adds	r3, #36	; 0x24
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d117      	bne.n	80061d8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80061a8:	6839      	ldr	r1, [r7, #0]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fbb8 	bl	8006920 <USBD_CtlError>
            break;
 80061b0:	e054      	b.n	800625c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80061b2:	7bbb      	ldrb	r3, [r7, #14]
 80061b4:	f003 020f 	and.w	r2, r3, #15
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	4613      	mov	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	440b      	add	r3, r1
 80061c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d104      	bne.n	80061d8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80061ce:	6839      	ldr	r1, [r7, #0]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fba5 	bl	8006920 <USBD_CtlError>
            break;
 80061d6:	e041      	b.n	800625c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	da0b      	bge.n	80061f8 <USBD_StdEPReq+0x224>
 80061e0:	7bbb      	ldrb	r3, [r7, #14]
 80061e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	3310      	adds	r3, #16
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	4413      	add	r3, r2
 80061f4:	3304      	adds	r3, #4
 80061f6:	e00b      	b.n	8006210 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80061f8:	7bbb      	ldrb	r3, [r7, #14]
 80061fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061fe:	4613      	mov	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	4413      	add	r3, r2
 800620e:	3304      	adds	r3, #4
 8006210:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006212:	7bbb      	ldrb	r3, [r7, #14]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <USBD_StdEPReq+0x24a>
 8006218:	7bbb      	ldrb	r3, [r7, #14]
 800621a:	2b80      	cmp	r3, #128	; 0x80
 800621c:	d103      	bne.n	8006226 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	e00e      	b.n	8006244 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006226:	7bbb      	ldrb	r3, [r7, #14]
 8006228:	4619      	mov	r1, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f001 f898 	bl	8007360 <USBD_LL_IsStallEP>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2201      	movs	r2, #1
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	e002      	b.n	8006244 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2202      	movs	r2, #2
 8006248:	4619      	mov	r1, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fbd9 	bl	8006a02 <USBD_CtlSendData>
          break;
 8006250:	e004      	b.n	800625c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006252:	6839      	ldr	r1, [r7, #0]
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fb63 	bl	8006920 <USBD_CtlError>
        break;
 800625a:	bf00      	nop
      }
      break;
 800625c:	e004      	b.n	8006268 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fb5d 	bl	8006920 <USBD_CtlError>
      break;
 8006266:	bf00      	nop
    }
    break;
 8006268:	e004      	b.n	8006274 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800626a:	6839      	ldr	r1, [r7, #0]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fb57 	bl	8006920 <USBD_CtlError>
    break;
 8006272:	bf00      	nop
  }

  return ret;
 8006274:	7bfb      	ldrb	r3, [r7, #15]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
	...

08006280 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	885b      	ldrh	r3, [r3, #2]
 800629a:	0a1b      	lsrs	r3, r3, #8
 800629c:	b29b      	uxth	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	2b0e      	cmp	r3, #14
 80062a2:	f200 8152 	bhi.w	800654a <USBD_GetDescriptor+0x2ca>
 80062a6:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <USBD_GetDescriptor+0x2c>)
 80062a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ac:	0800631d 	.word	0x0800631d
 80062b0:	08006335 	.word	0x08006335
 80062b4:	08006375 	.word	0x08006375
 80062b8:	0800654b 	.word	0x0800654b
 80062bc:	0800654b 	.word	0x0800654b
 80062c0:	080064eb 	.word	0x080064eb
 80062c4:	08006517 	.word	0x08006517
 80062c8:	0800654b 	.word	0x0800654b
 80062cc:	0800654b 	.word	0x0800654b
 80062d0:	0800654b 	.word	0x0800654b
 80062d4:	0800654b 	.word	0x0800654b
 80062d8:	0800654b 	.word	0x0800654b
 80062dc:	0800654b 	.word	0x0800654b
 80062e0:	0800654b 	.word	0x0800654b
 80062e4:	080062e9 	.word	0x080062e9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00b      	beq.n	800630c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	7c12      	ldrb	r2, [r2, #16]
 8006300:	f107 0108 	add.w	r1, r7, #8
 8006304:	4610      	mov	r0, r2
 8006306:	4798      	blx	r3
 8006308:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800630a:	e126      	b.n	800655a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800630c:	6839      	ldr	r1, [r7, #0]
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fb06 	bl	8006920 <USBD_CtlError>
      err++;
 8006314:	7afb      	ldrb	r3, [r7, #11]
 8006316:	3301      	adds	r3, #1
 8006318:	72fb      	strb	r3, [r7, #11]
    break;
 800631a:	e11e      	b.n	800655a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	7c12      	ldrb	r2, [r2, #16]
 8006328:	f107 0108 	add.w	r1, r7, #8
 800632c:	4610      	mov	r0, r2
 800632e:	4798      	blx	r3
 8006330:	60f8      	str	r0, [r7, #12]
    break;
 8006332:	e112      	b.n	800655a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	7c1b      	ldrb	r3, [r3, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10d      	bne.n	8006358 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006344:	f107 0208 	add.w	r2, r7, #8
 8006348:	4610      	mov	r0, r2
 800634a:	4798      	blx	r3
 800634c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3301      	adds	r3, #1
 8006352:	2202      	movs	r2, #2
 8006354:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006356:	e100      	b.n	800655a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800635e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006360:	f107 0208 	add.w	r2, r7, #8
 8006364:	4610      	mov	r0, r2
 8006366:	4798      	blx	r3
 8006368:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	3301      	adds	r3, #1
 800636e:	2202      	movs	r2, #2
 8006370:	701a      	strb	r2, [r3, #0]
    break;
 8006372:	e0f2      	b.n	800655a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	885b      	ldrh	r3, [r3, #2]
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b05      	cmp	r3, #5
 800637c:	f200 80ac 	bhi.w	80064d8 <USBD_GetDescriptor+0x258>
 8006380:	a201      	add	r2, pc, #4	; (adr r2, 8006388 <USBD_GetDescriptor+0x108>)
 8006382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006386:	bf00      	nop
 8006388:	080063a1 	.word	0x080063a1
 800638c:	080063d5 	.word	0x080063d5
 8006390:	08006409 	.word	0x08006409
 8006394:	0800643d 	.word	0x0800643d
 8006398:	08006471 	.word	0x08006471
 800639c:	080064a5 	.word	0x080064a5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00b      	beq.n	80063c4 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	7c12      	ldrb	r2, [r2, #16]
 80063b8:	f107 0108 	add.w	r1, r7, #8
 80063bc:	4610      	mov	r0, r2
 80063be:	4798      	blx	r3
 80063c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063c2:	e091      	b.n	80064e8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 faaa 	bl	8006920 <USBD_CtlError>
        err++;
 80063cc:	7afb      	ldrb	r3, [r7, #11]
 80063ce:	3301      	adds	r3, #1
 80063d0:	72fb      	strb	r3, [r7, #11]
      break;
 80063d2:	e089      	b.n	80064e8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00b      	beq.n	80063f8 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	7c12      	ldrb	r2, [r2, #16]
 80063ec:	f107 0108 	add.w	r1, r7, #8
 80063f0:	4610      	mov	r0, r2
 80063f2:	4798      	blx	r3
 80063f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063f6:	e077      	b.n	80064e8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fa90 	bl	8006920 <USBD_CtlError>
        err++;
 8006400:	7afb      	ldrb	r3, [r7, #11]
 8006402:	3301      	adds	r3, #1
 8006404:	72fb      	strb	r3, [r7, #11]
      break;
 8006406:	e06f      	b.n	80064e8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00b      	beq.n	800642c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	7c12      	ldrb	r2, [r2, #16]
 8006420:	f107 0108 	add.w	r1, r7, #8
 8006424:	4610      	mov	r0, r2
 8006426:	4798      	blx	r3
 8006428:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800642a:	e05d      	b.n	80064e8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fa76 	bl	8006920 <USBD_CtlError>
        err++;
 8006434:	7afb      	ldrb	r3, [r7, #11]
 8006436:	3301      	adds	r3, #1
 8006438:	72fb      	strb	r3, [r7, #11]
      break;
 800643a:	e055      	b.n	80064e8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00b      	beq.n	8006460 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	7c12      	ldrb	r2, [r2, #16]
 8006454:	f107 0108 	add.w	r1, r7, #8
 8006458:	4610      	mov	r0, r2
 800645a:	4798      	blx	r3
 800645c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800645e:	e043      	b.n	80064e8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fa5c 	bl	8006920 <USBD_CtlError>
        err++;
 8006468:	7afb      	ldrb	r3, [r7, #11]
 800646a:	3301      	adds	r3, #1
 800646c:	72fb      	strb	r3, [r7, #11]
      break;
 800646e:	e03b      	b.n	80064e8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00b      	beq.n	8006494 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	7c12      	ldrb	r2, [r2, #16]
 8006488:	f107 0108 	add.w	r1, r7, #8
 800648c:	4610      	mov	r0, r2
 800648e:	4798      	blx	r3
 8006490:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006492:	e029      	b.n	80064e8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fa42 	bl	8006920 <USBD_CtlError>
        err++;
 800649c:	7afb      	ldrb	r3, [r7, #11]
 800649e:	3301      	adds	r3, #1
 80064a0:	72fb      	strb	r3, [r7, #11]
      break;
 80064a2:	e021      	b.n	80064e8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00b      	beq.n	80064c8 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	7c12      	ldrb	r2, [r2, #16]
 80064bc:	f107 0108 	add.w	r1, r7, #8
 80064c0:	4610      	mov	r0, r2
 80064c2:	4798      	blx	r3
 80064c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064c6:	e00f      	b.n	80064e8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80064c8:	6839      	ldr	r1, [r7, #0]
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fa28 	bl	8006920 <USBD_CtlError>
        err++;
 80064d0:	7afb      	ldrb	r3, [r7, #11]
 80064d2:	3301      	adds	r3, #1
 80064d4:	72fb      	strb	r3, [r7, #11]
      break;
 80064d6:	e007      	b.n	80064e8 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fa20 	bl	8006920 <USBD_CtlError>
      err++;
 80064e0:	7afb      	ldrb	r3, [r7, #11]
 80064e2:	3301      	adds	r3, #1
 80064e4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80064e6:	bf00      	nop
    }
    break;
 80064e8:	e037      	b.n	800655a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	7c1b      	ldrb	r3, [r3, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d109      	bne.n	8006506 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fa:	f107 0208 	add.w	r2, r7, #8
 80064fe:	4610      	mov	r0, r2
 8006500:	4798      	blx	r3
 8006502:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006504:	e029      	b.n	800655a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006506:	6839      	ldr	r1, [r7, #0]
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fa09 	bl	8006920 <USBD_CtlError>
      err++;
 800650e:	7afb      	ldrb	r3, [r7, #11]
 8006510:	3301      	adds	r3, #1
 8006512:	72fb      	strb	r3, [r7, #11]
    break;
 8006514:	e021      	b.n	800655a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	7c1b      	ldrb	r3, [r3, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10d      	bne.n	800653a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006526:	f107 0208 	add.w	r2, r7, #8
 800652a:	4610      	mov	r0, r2
 800652c:	4798      	blx	r3
 800652e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3301      	adds	r3, #1
 8006534:	2207      	movs	r2, #7
 8006536:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006538:	e00f      	b.n	800655a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800653a:	6839      	ldr	r1, [r7, #0]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f9ef 	bl	8006920 <USBD_CtlError>
      err++;
 8006542:	7afb      	ldrb	r3, [r7, #11]
 8006544:	3301      	adds	r3, #1
 8006546:	72fb      	strb	r3, [r7, #11]
    break;
 8006548:	e007      	b.n	800655a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f9e7 	bl	8006920 <USBD_CtlError>
    err++;
 8006552:	7afb      	ldrb	r3, [r7, #11]
 8006554:	3301      	adds	r3, #1
 8006556:	72fb      	strb	r3, [r7, #11]
    break;
 8006558:	bf00      	nop
  }

  if (err != 0U)
 800655a:	7afb      	ldrb	r3, [r7, #11]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d11e      	bne.n	800659e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	88db      	ldrh	r3, [r3, #6]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d016      	beq.n	8006596 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8006568:	893b      	ldrh	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00e      	beq.n	800658c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	88da      	ldrh	r2, [r3, #6]
 8006572:	893b      	ldrh	r3, [r7, #8]
 8006574:	4293      	cmp	r3, r2
 8006576:	bf28      	it	cs
 8006578:	4613      	movcs	r3, r2
 800657a:	b29b      	uxth	r3, r3
 800657c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800657e:	893b      	ldrh	r3, [r7, #8]
 8006580:	461a      	mov	r2, r3
 8006582:	68f9      	ldr	r1, [r7, #12]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fa3c 	bl	8006a02 <USBD_CtlSendData>
 800658a:	e009      	b.n	80065a0 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f9c6 	bl	8006920 <USBD_CtlError>
 8006594:	e004      	b.n	80065a0 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fa8d 	bl	8006ab6 <USBD_CtlSendStatus>
 800659c:	e000      	b.n	80065a0 <USBD_GetDescriptor+0x320>
    return;
 800659e:	bf00      	nop
    }
  }
}
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop

080065a8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	889b      	ldrh	r3, [r3, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d130      	bne.n	800661c <USBD_SetAddress+0x74>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	88db      	ldrh	r3, [r3, #6]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d12c      	bne.n	800661c <USBD_SetAddress+0x74>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	885b      	ldrh	r3, [r3, #2]
 80065c6:	2b7f      	cmp	r3, #127	; 0x7f
 80065c8:	d828      	bhi.n	800661c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	885b      	ldrh	r3, [r3, #2]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d104      	bne.n	80065ea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f99c 	bl	8006920 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065e8:	e01c      	b.n	8006624 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	7bfa      	ldrb	r2, [r7, #15]
 80065ee:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fede 	bl	80073b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fa5a 	bl	8006ab6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d004      	beq.n	8006612 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006610:	e008      	b.n	8006624 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800661a:	e003      	b.n	8006624 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f97e 	bl	8006920 <USBD_CtlError>
  }
}
 8006624:	bf00      	nop
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	885b      	ldrh	r3, [r3, #2]
 800663e:	b2da      	uxtb	r2, r3
 8006640:	4b4b      	ldr	r3, [pc, #300]	; (8006770 <USBD_SetConfig+0x144>)
 8006642:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006644:	4b4a      	ldr	r3, [pc, #296]	; (8006770 <USBD_SetConfig+0x144>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d905      	bls.n	8006658 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f966 	bl	8006920 <USBD_CtlError>
    return USBD_FAIL;
 8006654:	2303      	movs	r3, #3
 8006656:	e087      	b.n	8006768 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800665e:	2b02      	cmp	r3, #2
 8006660:	d002      	beq.n	8006668 <USBD_SetConfig+0x3c>
 8006662:	2b03      	cmp	r3, #3
 8006664:	d025      	beq.n	80066b2 <USBD_SetConfig+0x86>
 8006666:	e071      	b.n	800674c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006668:	4b41      	ldr	r3, [pc, #260]	; (8006770 <USBD_SetConfig+0x144>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01c      	beq.n	80066aa <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006670:	4b3f      	ldr	r3, [pc, #252]	; (8006770 <USBD_SetConfig+0x144>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	461a      	mov	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800667a:	4b3d      	ldr	r3, [pc, #244]	; (8006770 <USBD_SetConfig+0x144>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7ff f965 	bl	8005950 <USBD_SetClassConfig>
 8006686:	4603      	mov	r3, r0
 8006688:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800668a:	7bfb      	ldrb	r3, [r7, #15]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d004      	beq.n	800669a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f944 	bl	8006920 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006698:	e065      	b.n	8006766 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fa0b 	bl	8006ab6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2203      	movs	r2, #3
 80066a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80066a8:	e05d      	b.n	8006766 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fa03 	bl	8006ab6 <USBD_CtlSendStatus>
    break;
 80066b0:	e059      	b.n	8006766 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80066b2:	4b2f      	ldr	r3, [pc, #188]	; (8006770 <USBD_SetConfig+0x144>)
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d112      	bne.n	80066e0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2202      	movs	r2, #2
 80066be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80066c2:	4b2b      	ldr	r3, [pc, #172]	; (8006770 <USBD_SetConfig+0x144>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066cc:	4b28      	ldr	r3, [pc, #160]	; (8006770 <USBD_SetConfig+0x144>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7ff f958 	bl	8005988 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f9ec 	bl	8006ab6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80066de:	e042      	b.n	8006766 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80066e0:	4b23      	ldr	r3, [pc, #140]	; (8006770 <USBD_SetConfig+0x144>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d02a      	beq.n	8006744 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff f946 	bl	8005988 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80066fc:	4b1c      	ldr	r3, [pc, #112]	; (8006770 <USBD_SetConfig+0x144>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006706:	4b1a      	ldr	r3, [pc, #104]	; (8006770 <USBD_SetConfig+0x144>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7ff f91f 	bl	8005950 <USBD_SetClassConfig>
 8006712:	4603      	mov	r3, r0
 8006714:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00f      	beq.n	800673c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f8fe 	bl	8006920 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	b2db      	uxtb	r3, r3
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff f92b 	bl	8005988 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2202      	movs	r2, #2
 8006736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800673a:	e014      	b.n	8006766 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f9ba 	bl	8006ab6 <USBD_CtlSendStatus>
    break;
 8006742:	e010      	b.n	8006766 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f9b6 	bl	8006ab6 <USBD_CtlSendStatus>
    break;
 800674a:	e00c      	b.n	8006766 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f8e6 	bl	8006920 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006754:	4b06      	ldr	r3, [pc, #24]	; (8006770 <USBD_SetConfig+0x144>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	4619      	mov	r1, r3
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7ff f914 	bl	8005988 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006760:	2303      	movs	r3, #3
 8006762:	73fb      	strb	r3, [r7, #15]
    break;
 8006764:	bf00      	nop
  }

  return ret;
 8006766:	7bfb      	ldrb	r3, [r7, #15]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	20000214 	.word	0x20000214

08006774 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	88db      	ldrh	r3, [r3, #6]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d004      	beq.n	8006790 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f8c9 	bl	8006920 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800678e:	e021      	b.n	80067d4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006796:	2b01      	cmp	r3, #1
 8006798:	db17      	blt.n	80067ca <USBD_GetConfig+0x56>
 800679a:	2b02      	cmp	r3, #2
 800679c:	dd02      	ble.n	80067a4 <USBD_GetConfig+0x30>
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d00b      	beq.n	80067ba <USBD_GetConfig+0x46>
 80067a2:	e012      	b.n	80067ca <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3308      	adds	r3, #8
 80067ae:	2201      	movs	r2, #1
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f925 	bl	8006a02 <USBD_CtlSendData>
      break;
 80067b8:	e00c      	b.n	80067d4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3304      	adds	r3, #4
 80067be:	2201      	movs	r2, #1
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f91d 	bl	8006a02 <USBD_CtlSendData>
      break;
 80067c8:	e004      	b.n	80067d4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f8a7 	bl	8006920 <USBD_CtlError>
      break;
 80067d2:	bf00      	nop
}
 80067d4:	bf00      	nop
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ec:	3b01      	subs	r3, #1
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d81e      	bhi.n	8006830 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	88db      	ldrh	r3, [r3, #6]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d004      	beq.n	8006804 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f88f 	bl	8006920 <USBD_CtlError>
      break;
 8006802:	e01a      	b.n	800683a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f043 0202 	orr.w	r2, r3, #2
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	330c      	adds	r3, #12
 8006824:	2202      	movs	r2, #2
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f8ea 	bl	8006a02 <USBD_CtlSendData>
    break;
 800682e:	e004      	b.n	800683a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f874 	bl	8006920 <USBD_CtlError>
    break;
 8006838:	bf00      	nop
  }
}
 800683a:	bf00      	nop
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b082      	sub	sp, #8
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	885b      	ldrh	r3, [r3, #2]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d106      	bne.n	8006862 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f92a 	bl	8006ab6 <USBD_CtlSendStatus>
  }
}
 8006862:	bf00      	nop
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b082      	sub	sp, #8
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687a:	3b01      	subs	r3, #1
 800687c:	2b02      	cmp	r3, #2
 800687e:	d80b      	bhi.n	8006898 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	885b      	ldrh	r3, [r3, #2]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d10c      	bne.n	80068a2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f910 	bl	8006ab6 <USBD_CtlSendStatus>
      }
      break;
 8006896:	e004      	b.n	80068a2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f840 	bl	8006920 <USBD_CtlError>
      break;
 80068a0:	e000      	b.n	80068a4 <USBD_ClrFeature+0x3a>
      break;
 80068a2:	bf00      	nop
  }
}
 80068a4:	bf00      	nop
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	781a      	ldrb	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3301      	adds	r3, #1
 80068c6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	781a      	ldrb	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	3301      	adds	r3, #1
 80068d4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f7ff faa2 	bl	8005e20 <SWAPBYTE>
 80068dc:	4603      	mov	r3, r0
 80068de:	461a      	mov	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3301      	adds	r3, #1
 80068e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3301      	adds	r3, #1
 80068ee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f7ff fa95 	bl	8005e20 <SWAPBYTE>
 80068f6:	4603      	mov	r3, r0
 80068f8:	461a      	mov	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3301      	adds	r3, #1
 8006902:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3301      	adds	r3, #1
 8006908:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f7ff fa88 	bl	8005e20 <SWAPBYTE>
 8006910:	4603      	mov	r3, r0
 8006912:	461a      	mov	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	80da      	strh	r2, [r3, #6]
}
 8006918:	bf00      	nop
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800692a:	2180      	movs	r1, #128	; 0x80
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fcd9 	bl	80072e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006932:	2100      	movs	r1, #0
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fcd5 	bl	80072e4 <USBD_LL_StallEP>
}
 800693a:	bf00      	nop
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b086      	sub	sp, #24
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d036      	beq.n	80069c6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800695c:	6938      	ldr	r0, [r7, #16]
 800695e:	f000 f836 	bl	80069ce <USBD_GetLen>
 8006962:	4603      	mov	r3, r0
 8006964:	3301      	adds	r3, #1
 8006966:	b29b      	uxth	r3, r3
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006970:	7dfb      	ldrb	r3, [r7, #23]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	4413      	add	r3, r2
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	7812      	ldrb	r2, [r2, #0]
 800697a:	701a      	strb	r2, [r3, #0]
  idx++;
 800697c:	7dfb      	ldrb	r3, [r7, #23]
 800697e:	3301      	adds	r3, #1
 8006980:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006982:	7dfb      	ldrb	r3, [r7, #23]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	4413      	add	r3, r2
 8006988:	2203      	movs	r2, #3
 800698a:	701a      	strb	r2, [r3, #0]
  idx++;
 800698c:	7dfb      	ldrb	r3, [r7, #23]
 800698e:	3301      	adds	r3, #1
 8006990:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006992:	e013      	b.n	80069bc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006994:	7dfb      	ldrb	r3, [r7, #23]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4413      	add	r3, r2
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	7812      	ldrb	r2, [r2, #0]
 800699e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	3301      	adds	r3, #1
 80069a4:	613b      	str	r3, [r7, #16]
    idx++;
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
 80069a8:	3301      	adds	r3, #1
 80069aa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	4413      	add	r3, r2
 80069b2:	2200      	movs	r2, #0
 80069b4:	701a      	strb	r2, [r3, #0]
    idx++;
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
 80069b8:	3301      	adds	r3, #1
 80069ba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e7      	bne.n	8006994 <USBD_GetString+0x52>
 80069c4:	e000      	b.n	80069c8 <USBD_GetString+0x86>
    return;
 80069c6:	bf00      	nop
  }
}
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80069de:	e005      	b.n	80069ec <USBD_GetLen+0x1e>
  {
    len++;
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
 80069e2:	3301      	adds	r3, #1
 80069e4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	3301      	adds	r3, #1
 80069ea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1f5      	bne.n	80069e0 <USBD_GetLen+0x12>
  }

  return len;
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2202      	movs	r2, #2
 8006a12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	2100      	movs	r1, #0
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 fce4 	bl	80073f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	2100      	movs	r1, #0
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f000 fcd3 	bl	80073f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2203      	movs	r2, #3
 8006a6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	2100      	movs	r1, #0
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 fcd7 	bl	8007438 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 fcc6 	bl	8007438 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b082      	sub	sp, #8
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2204      	movs	r2, #4
 8006ac2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2100      	movs	r1, #0
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fc92 	bl	80073f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2205      	movs	r2, #5
 8006ae8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006aec:	2300      	movs	r3, #0
 8006aee:	2200      	movs	r2, #0
 8006af0:	2100      	movs	r1, #0
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fca0 	bl	8007438 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	4912      	ldr	r1, [pc, #72]	; (8006b54 <MX_USB_DEVICE_Init+0x50>)
 8006b0c:	4812      	ldr	r0, [pc, #72]	; (8006b58 <MX_USB_DEVICE_Init+0x54>)
 8006b0e:	f7fe feb1 	bl	8005874 <USBD_Init>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b18:	f7f9 fe64 	bl	80007e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006b1c:	490f      	ldr	r1, [pc, #60]	; (8006b5c <MX_USB_DEVICE_Init+0x58>)
 8006b1e:	480e      	ldr	r0, [pc, #56]	; (8006b58 <MX_USB_DEVICE_Init+0x54>)
 8006b20:	f7fe fede 	bl	80058e0 <USBD_RegisterClass>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b2a:	f7f9 fe5b 	bl	80007e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006b2e:	490c      	ldr	r1, [pc, #48]	; (8006b60 <MX_USB_DEVICE_Init+0x5c>)
 8006b30:	4809      	ldr	r0, [pc, #36]	; (8006b58 <MX_USB_DEVICE_Init+0x54>)
 8006b32:	f7fe fe33 	bl	800579c <USBD_CDC_RegisterInterface>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006b3c:	f7f9 fe52 	bl	80007e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b40:	4805      	ldr	r0, [pc, #20]	; (8006b58 <MX_USB_DEVICE_Init+0x54>)
 8006b42:	f7fe feee 	bl	8005922 <USBD_Start>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006b4c:	f7f9 fe4a 	bl	80007e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b50:	bf00      	nop
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	20000130 	.word	0x20000130
 8006b58:	20001078 	.word	0x20001078
 8006b5c:	20000018 	.word	0x20000018
 8006b60:	2000011c 	.word	0x2000011c

08006b64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006b68:	2200      	movs	r2, #0
 8006b6a:	4905      	ldr	r1, [pc, #20]	; (8006b80 <CDC_Init_FS+0x1c>)
 8006b6c:	4805      	ldr	r0, [pc, #20]	; (8006b84 <CDC_Init_FS+0x20>)
 8006b6e:	f7fe fe2a 	bl	80057c6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006b72:	4905      	ldr	r1, [pc, #20]	; (8006b88 <CDC_Init_FS+0x24>)
 8006b74:	4803      	ldr	r0, [pc, #12]	; (8006b84 <CDC_Init_FS+0x20>)
 8006b76:	f7fe fe3f 	bl	80057f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006b7a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	20001b48 	.word	0x20001b48
 8006b84:	20001078 	.word	0x20001078
 8006b88:	20001348 	.word	0x20001348

08006b8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006b90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	6039      	str	r1, [r7, #0]
 8006ba6:	71fb      	strb	r3, [r7, #7]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006bac:	79fb      	ldrb	r3, [r7, #7]
 8006bae:	2b23      	cmp	r3, #35	; 0x23
 8006bb0:	d84a      	bhi.n	8006c48 <CDC_Control_FS+0xac>
 8006bb2:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <CDC_Control_FS+0x1c>)
 8006bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb8:	08006c49 	.word	0x08006c49
 8006bbc:	08006c49 	.word	0x08006c49
 8006bc0:	08006c49 	.word	0x08006c49
 8006bc4:	08006c49 	.word	0x08006c49
 8006bc8:	08006c49 	.word	0x08006c49
 8006bcc:	08006c49 	.word	0x08006c49
 8006bd0:	08006c49 	.word	0x08006c49
 8006bd4:	08006c49 	.word	0x08006c49
 8006bd8:	08006c49 	.word	0x08006c49
 8006bdc:	08006c49 	.word	0x08006c49
 8006be0:	08006c49 	.word	0x08006c49
 8006be4:	08006c49 	.word	0x08006c49
 8006be8:	08006c49 	.word	0x08006c49
 8006bec:	08006c49 	.word	0x08006c49
 8006bf0:	08006c49 	.word	0x08006c49
 8006bf4:	08006c49 	.word	0x08006c49
 8006bf8:	08006c49 	.word	0x08006c49
 8006bfc:	08006c49 	.word	0x08006c49
 8006c00:	08006c49 	.word	0x08006c49
 8006c04:	08006c49 	.word	0x08006c49
 8006c08:	08006c49 	.word	0x08006c49
 8006c0c:	08006c49 	.word	0x08006c49
 8006c10:	08006c49 	.word	0x08006c49
 8006c14:	08006c49 	.word	0x08006c49
 8006c18:	08006c49 	.word	0x08006c49
 8006c1c:	08006c49 	.word	0x08006c49
 8006c20:	08006c49 	.word	0x08006c49
 8006c24:	08006c49 	.word	0x08006c49
 8006c28:	08006c49 	.word	0x08006c49
 8006c2c:	08006c49 	.word	0x08006c49
 8006c30:	08006c49 	.word	0x08006c49
 8006c34:	08006c49 	.word	0x08006c49
 8006c38:	08006c49 	.word	0x08006c49
 8006c3c:	08006c49 	.word	0x08006c49
 8006c40:	08006c49 	.word	0x08006c49
 8006c44:	08006c49 	.word	0x08006c49
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006c48:	bf00      	nop
  }

  return (USBD_OK);
 8006c4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	4805      	ldr	r0, [pc, #20]	; (8006c7c <CDC_Receive_FS+0x24>)
 8006c66:	f7fe fdc7 	bl	80057f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006c6a:	4804      	ldr	r0, [pc, #16]	; (8006c7c <CDC_Receive_FS+0x24>)
 8006c6c:	f7fe fdd8 	bl	8005820 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006c70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20001078 	.word	0x20001078

08006c80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006c92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
	...

08006ca4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	6039      	str	r1, [r7, #0]
 8006cae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2212      	movs	r2, #18
 8006cb4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006cb6:	4b03      	ldr	r3, [pc, #12]	; (8006cc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	20000150 	.word	0x20000150

08006cc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	4603      	mov	r3, r0
 8006cd0:	6039      	str	r1, [r7, #0]
 8006cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2204      	movs	r2, #4
 8006cd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006cda:	4b03      	ldr	r3, [pc, #12]	; (8006ce8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	20000170 	.word	0x20000170

08006cec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	6039      	str	r1, [r7, #0]
 8006cf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006cf8:	79fb      	ldrb	r3, [r7, #7]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d105      	bne.n	8006d0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	4907      	ldr	r1, [pc, #28]	; (8006d20 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d02:	4808      	ldr	r0, [pc, #32]	; (8006d24 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d04:	f7ff fe1d 	bl	8006942 <USBD_GetString>
 8006d08:	e004      	b.n	8006d14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	4904      	ldr	r1, [pc, #16]	; (8006d20 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d0e:	4805      	ldr	r0, [pc, #20]	; (8006d24 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d10:	f7ff fe17 	bl	8006942 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d14:	4b02      	ldr	r3, [pc, #8]	; (8006d20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	20002348 	.word	0x20002348
 8006d24:	080077a4 	.word	0x080077a4

08006d28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	4603      	mov	r3, r0
 8006d30:	6039      	str	r1, [r7, #0]
 8006d32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	4904      	ldr	r1, [pc, #16]	; (8006d48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006d38:	4804      	ldr	r0, [pc, #16]	; (8006d4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006d3a:	f7ff fe02 	bl	8006942 <USBD_GetString>
  return USBD_StrDesc;
 8006d3e:	4b02      	ldr	r3, [pc, #8]	; (8006d48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	20002348 	.word	0x20002348
 8006d4c:	080077c0 	.word	0x080077c0

08006d50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	4603      	mov	r3, r0
 8006d58:	6039      	str	r1, [r7, #0]
 8006d5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	221a      	movs	r2, #26
 8006d60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006d62:	f000 f855 	bl	8006e10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006d66:	4b02      	ldr	r3, [pc, #8]	; (8006d70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	20000174 	.word	0x20000174

08006d74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	6039      	str	r1, [r7, #0]
 8006d7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d105      	bne.n	8006d92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	4907      	ldr	r1, [pc, #28]	; (8006da8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d8a:	4808      	ldr	r0, [pc, #32]	; (8006dac <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d8c:	f7ff fdd9 	bl	8006942 <USBD_GetString>
 8006d90:	e004      	b.n	8006d9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	4904      	ldr	r1, [pc, #16]	; (8006da8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d96:	4805      	ldr	r0, [pc, #20]	; (8006dac <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d98:	f7ff fdd3 	bl	8006942 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d9c:	4b02      	ldr	r3, [pc, #8]	; (8006da8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	20002348 	.word	0x20002348
 8006dac:	080077d4 	.word	0x080077d4

08006db0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	4603      	mov	r3, r0
 8006db8:	6039      	str	r1, [r7, #0]
 8006dba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006dbc:	79fb      	ldrb	r3, [r7, #7]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d105      	bne.n	8006dce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	4907      	ldr	r1, [pc, #28]	; (8006de4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006dc6:	4808      	ldr	r0, [pc, #32]	; (8006de8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006dc8:	f7ff fdbb 	bl	8006942 <USBD_GetString>
 8006dcc:	e004      	b.n	8006dd8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	4904      	ldr	r1, [pc, #16]	; (8006de4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006dd2:	4805      	ldr	r0, [pc, #20]	; (8006de8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006dd4:	f7ff fdb5 	bl	8006942 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006dd8:	4b02      	ldr	r3, [pc, #8]	; (8006de4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20002348 	.word	0x20002348
 8006de8:	080077e0 	.word	0x080077e0

08006dec <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	4603      	mov	r3, r0
 8006df4:	6039      	str	r1, [r7, #0]
 8006df6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	220c      	movs	r2, #12
 8006dfc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006dfe:	4b03      	ldr	r3, [pc, #12]	; (8006e0c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	20000164 	.word	0x20000164

08006e10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e16:	4b0f      	ldr	r3, [pc, #60]	; (8006e54 <Get_SerialNum+0x44>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e1c:	4b0e      	ldr	r3, [pc, #56]	; (8006e58 <Get_SerialNum+0x48>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e22:	4b0e      	ldr	r3, [pc, #56]	; (8006e5c <Get_SerialNum+0x4c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d009      	beq.n	8006e4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e36:	2208      	movs	r2, #8
 8006e38:	4909      	ldr	r1, [pc, #36]	; (8006e60 <Get_SerialNum+0x50>)
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 f814 	bl	8006e68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e40:	2204      	movs	r2, #4
 8006e42:	4908      	ldr	r1, [pc, #32]	; (8006e64 <Get_SerialNum+0x54>)
 8006e44:	68b8      	ldr	r0, [r7, #8]
 8006e46:	f000 f80f 	bl	8006e68 <IntToUnicode>
  }
}
 8006e4a:	bf00      	nop
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	1fff7a10 	.word	0x1fff7a10
 8006e58:	1fff7a14 	.word	0x1fff7a14
 8006e5c:	1fff7a18 	.word	0x1fff7a18
 8006e60:	20000176 	.word	0x20000176
 8006e64:	20000186 	.word	0x20000186

08006e68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	4613      	mov	r3, r2
 8006e74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006e76:	2300      	movs	r3, #0
 8006e78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	75fb      	strb	r3, [r7, #23]
 8006e7e:	e027      	b.n	8006ed0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	0f1b      	lsrs	r3, r3, #28
 8006e84:	2b09      	cmp	r3, #9
 8006e86:	d80b      	bhi.n	8006ea0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	0f1b      	lsrs	r3, r3, #28
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	7dfb      	ldrb	r3, [r7, #23]
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	4619      	mov	r1, r3
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	440b      	add	r3, r1
 8006e98:	3230      	adds	r2, #48	; 0x30
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]
 8006e9e:	e00a      	b.n	8006eb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	0f1b      	lsrs	r3, r3, #28
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	4619      	mov	r1, r3
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	440b      	add	r3, r1
 8006eb0:	3237      	adds	r2, #55	; 0x37
 8006eb2:	b2d2      	uxtb	r2, r2
 8006eb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	011b      	lsls	r3, r3, #4
 8006eba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	75fb      	strb	r3, [r7, #23]
 8006ed0:	7dfa      	ldrb	r2, [r7, #23]
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d3d3      	bcc.n	8006e80 <IntToUnicode+0x18>
  }
}
 8006ed8:	bf00      	nop
 8006eda:	371c      	adds	r7, #28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b08a      	sub	sp, #40	; 0x28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eec:	f107 0314 	add.w	r3, r7, #20
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	605a      	str	r2, [r3, #4]
 8006ef6:	609a      	str	r2, [r3, #8]
 8006ef8:	60da      	str	r2, [r3, #12]
 8006efa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f04:	d147      	bne.n	8006f96 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f06:	2300      	movs	r3, #0
 8006f08:	613b      	str	r3, [r7, #16]
 8006f0a:	4b25      	ldr	r3, [pc, #148]	; (8006fa0 <HAL_PCD_MspInit+0xbc>)
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0e:	4a24      	ldr	r2, [pc, #144]	; (8006fa0 <HAL_PCD_MspInit+0xbc>)
 8006f10:	f043 0301 	orr.w	r3, r3, #1
 8006f14:	6313      	str	r3, [r2, #48]	; 0x30
 8006f16:	4b22      	ldr	r3, [pc, #136]	; (8006fa0 <HAL_PCD_MspInit+0xbc>)
 8006f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	613b      	str	r3, [r7, #16]
 8006f20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006f22:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8006f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f30:	2303      	movs	r3, #3
 8006f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f34:	230a      	movs	r3, #10
 8006f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f38:	f107 0314 	add.w	r3, r7, #20
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	4819      	ldr	r0, [pc, #100]	; (8006fa4 <HAL_PCD_MspInit+0xc0>)
 8006f40:	f7f9 ff12 	bl	8000d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006f52:	f107 0314 	add.w	r3, r7, #20
 8006f56:	4619      	mov	r1, r3
 8006f58:	4812      	ldr	r0, [pc, #72]	; (8006fa4 <HAL_PCD_MspInit+0xc0>)
 8006f5a:	f7f9 ff05 	bl	8000d68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f5e:	4b10      	ldr	r3, [pc, #64]	; (8006fa0 <HAL_PCD_MspInit+0xbc>)
 8006f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f62:	4a0f      	ldr	r2, [pc, #60]	; (8006fa0 <HAL_PCD_MspInit+0xbc>)
 8006f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f68:	6353      	str	r3, [r2, #52]	; 0x34
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <HAL_PCD_MspInit+0xbc>)
 8006f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f72:	4a0b      	ldr	r2, [pc, #44]	; (8006fa0 <HAL_PCD_MspInit+0xbc>)
 8006f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f78:	6453      	str	r3, [r2, #68]	; 0x44
 8006f7a:	4b09      	ldr	r3, [pc, #36]	; (8006fa0 <HAL_PCD_MspInit+0xbc>)
 8006f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006f86:	2200      	movs	r2, #0
 8006f88:	2100      	movs	r1, #0
 8006f8a:	2043      	movs	r0, #67	; 0x43
 8006f8c:	f7f9 feb5 	bl	8000cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006f90:	2043      	movs	r0, #67	; 0x43
 8006f92:	f7f9 fece 	bl	8000d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006f96:	bf00      	nop
 8006f98:	3728      	adds	r7, #40	; 0x28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	40023800 	.word	0x40023800
 8006fa4:	40020000 	.word	0x40020000

08006fa8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	f7fe fcfa 	bl	80059b8 <USBD_LL_SetupStage>
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006fde:	78fa      	ldrb	r2, [r7, #3]
 8006fe0:	6879      	ldr	r1, [r7, #4]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	00db      	lsls	r3, r3, #3
 8006fe6:	1a9b      	subs	r3, r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	440b      	add	r3, r1
 8006fec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	78fb      	ldrb	r3, [r7, #3]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	f7fe fd43 	bl	8005a80 <USBD_LL_DataOutStage>
}
 8006ffa:	bf00      	nop
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	460b      	mov	r3, r1
 800700c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007014:	78fa      	ldrb	r2, [r7, #3]
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	4613      	mov	r3, r2
 800701a:	00db      	lsls	r3, r3, #3
 800701c:	1a9b      	subs	r3, r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	440b      	add	r3, r1
 8007022:	3348      	adds	r3, #72	; 0x48
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	78fb      	ldrb	r3, [r7, #3]
 8007028:	4619      	mov	r1, r3
 800702a:	f7fe fd8c 	bl	8005b46 <USBD_LL_DataInStage>
}
 800702e:	bf00      	nop
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007044:	4618      	mov	r0, r3
 8007046:	f7fe fe90 	bl	8005d6a <USBD_LL_SOF>
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800705a:	2301      	movs	r3, #1
 800705c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d102      	bne.n	800706c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007066:	2300      	movs	r3, #0
 8007068:	73fb      	strb	r3, [r7, #15]
 800706a:	e008      	b.n	800707e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	2b02      	cmp	r3, #2
 8007072:	d102      	bne.n	800707a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007074:	2301      	movs	r3, #1
 8007076:	73fb      	strb	r3, [r7, #15]
 8007078:	e001      	b.n	800707e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800707a:	f7f9 fbb3 	bl	80007e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007084:	7bfa      	ldrb	r2, [r7, #15]
 8007086:	4611      	mov	r1, r2
 8007088:	4618      	mov	r0, r3
 800708a:	f7fe fe33 	bl	8005cf4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007094:	4618      	mov	r0, r3
 8007096:	f7fe fdec 	bl	8005c72 <USBD_LL_Reset>
}
 800709a:	bf00      	nop
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
	...

080070a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fe fe2e 	bl	8005d14 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6812      	ldr	r2, [r2, #0]
 80070c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070ca:	f043 0301 	orr.w	r3, r3, #1
 80070ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d005      	beq.n	80070e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070d8:	4b04      	ldr	r3, [pc, #16]	; (80070ec <HAL_PCD_SuspendCallback+0x48>)
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	4a03      	ldr	r2, [pc, #12]	; (80070ec <HAL_PCD_SuspendCallback+0x48>)
 80070de:	f043 0306 	orr.w	r3, r3, #6
 80070e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	e000ed00 	.word	0xe000ed00

080070f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fe fe1d 	bl	8005d3e <USBD_LL_Resume>
}
 8007104:	bf00      	nop
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800711e:	78fa      	ldrb	r2, [r7, #3]
 8007120:	4611      	mov	r1, r2
 8007122:	4618      	mov	r0, r3
 8007124:	f7fe fe48 	bl	8005db8 <USBD_LL_IsoOUTIncomplete>
}
 8007128:	bf00      	nop
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007142:	78fa      	ldrb	r2, [r7, #3]
 8007144:	4611      	mov	r1, r2
 8007146:	4618      	mov	r0, r3
 8007148:	f7fe fe29 	bl	8005d9e <USBD_LL_IsoINIncomplete>
}
 800714c:	bf00      	nop
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007162:	4618      	mov	r0, r3
 8007164:	f7fe fe35 	bl	8005dd2 <USBD_LL_DevConnected>
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe fe32 	bl	8005de8 <USBD_LL_DevDisconnected>
}
 8007184:	bf00      	nop
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d13c      	bne.n	8007216 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800719c:	4a20      	ldr	r2, [pc, #128]	; (8007220 <USBD_LL_Init+0x94>)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a1e      	ldr	r2, [pc, #120]	; (8007220 <USBD_LL_Init+0x94>)
 80071a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80071ac:	4b1c      	ldr	r3, [pc, #112]	; (8007220 <USBD_LL_Init+0x94>)
 80071ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80071b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80071b4:	4b1a      	ldr	r3, [pc, #104]	; (8007220 <USBD_LL_Init+0x94>)
 80071b6:	2206      	movs	r2, #6
 80071b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80071ba:	4b19      	ldr	r3, [pc, #100]	; (8007220 <USBD_LL_Init+0x94>)
 80071bc:	2202      	movs	r2, #2
 80071be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80071c0:	4b17      	ldr	r3, [pc, #92]	; (8007220 <USBD_LL_Init+0x94>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80071c6:	4b16      	ldr	r3, [pc, #88]	; (8007220 <USBD_LL_Init+0x94>)
 80071c8:	2202      	movs	r2, #2
 80071ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80071cc:	4b14      	ldr	r3, [pc, #80]	; (8007220 <USBD_LL_Init+0x94>)
 80071ce:	2201      	movs	r2, #1
 80071d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80071d2:	4b13      	ldr	r3, [pc, #76]	; (8007220 <USBD_LL_Init+0x94>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80071d8:	4b11      	ldr	r3, [pc, #68]	; (8007220 <USBD_LL_Init+0x94>)
 80071da:	2200      	movs	r2, #0
 80071dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80071de:	4b10      	ldr	r3, [pc, #64]	; (8007220 <USBD_LL_Init+0x94>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80071e4:	4b0e      	ldr	r3, [pc, #56]	; (8007220 <USBD_LL_Init+0x94>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80071ea:	480d      	ldr	r0, [pc, #52]	; (8007220 <USBD_LL_Init+0x94>)
 80071ec:	f7f9 ff67 	bl	80010be <HAL_PCD_Init>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80071f6:	f7f9 faf5 	bl	80007e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80071fa:	2180      	movs	r1, #128	; 0x80
 80071fc:	4808      	ldr	r0, [pc, #32]	; (8007220 <USBD_LL_Init+0x94>)
 80071fe:	f7fb f918 	bl	8002432 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007202:	2240      	movs	r2, #64	; 0x40
 8007204:	2100      	movs	r1, #0
 8007206:	4806      	ldr	r0, [pc, #24]	; (8007220 <USBD_LL_Init+0x94>)
 8007208:	f7fb f8cc 	bl	80023a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800720c:	2280      	movs	r2, #128	; 0x80
 800720e:	2101      	movs	r1, #1
 8007210:	4803      	ldr	r0, [pc, #12]	; (8007220 <USBD_LL_Init+0x94>)
 8007212:	f7fb f8c7 	bl	80023a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	20002548 	.word	0x20002548

08007224 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800723a:	4618      	mov	r0, r3
 800723c:	f7fa f863 	bl	8001306 <HAL_PCD_Start>
 8007240:	4603      	mov	r3, r0
 8007242:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	4618      	mov	r0, r3
 8007248:	f000 f978 	bl	800753c <USBD_Get_USB_Status>
 800724c:	4603      	mov	r3, r0
 800724e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007250:	7bbb      	ldrb	r3, [r7, #14]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b084      	sub	sp, #16
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	4608      	mov	r0, r1
 8007264:	4611      	mov	r1, r2
 8007266:	461a      	mov	r2, r3
 8007268:	4603      	mov	r3, r0
 800726a:	70fb      	strb	r3, [r7, #3]
 800726c:	460b      	mov	r3, r1
 800726e:	70bb      	strb	r3, [r7, #2]
 8007270:	4613      	mov	r3, r2
 8007272:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007278:	2300      	movs	r3, #0
 800727a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007282:	78bb      	ldrb	r3, [r7, #2]
 8007284:	883a      	ldrh	r2, [r7, #0]
 8007286:	78f9      	ldrb	r1, [r7, #3]
 8007288:	f7fa fc93 	bl	8001bb2 <HAL_PCD_EP_Open>
 800728c:	4603      	mov	r3, r0
 800728e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	4618      	mov	r0, r3
 8007294:	f000 f952 	bl	800753c <USBD_Get_USB_Status>
 8007298:	4603      	mov	r3, r0
 800729a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800729c:	7bbb      	ldrb	r3, [r7, #14]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	460b      	mov	r3, r1
 80072b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072c0:	78fa      	ldrb	r2, [r7, #3]
 80072c2:	4611      	mov	r1, r2
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fa fcdc 	bl	8001c82 <HAL_PCD_EP_Close>
 80072ca:	4603      	mov	r3, r0
 80072cc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 f933 	bl	800753c <USBD_Get_USB_Status>
 80072d6:	4603      	mov	r3, r0
 80072d8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80072da:	7bbb      	ldrb	r3, [r7, #14]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072fe:	78fa      	ldrb	r2, [r7, #3]
 8007300:	4611      	mov	r1, r2
 8007302:	4618      	mov	r0, r3
 8007304:	f7fa fdb4 	bl	8001e70 <HAL_PCD_EP_SetStall>
 8007308:	4603      	mov	r3, r0
 800730a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800730c:	7bfb      	ldrb	r3, [r7, #15]
 800730e:	4618      	mov	r0, r3
 8007310:	f000 f914 	bl	800753c <USBD_Get_USB_Status>
 8007314:	4603      	mov	r3, r0
 8007316:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007318:	7bbb      	ldrb	r3, [r7, #14]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	460b      	mov	r3, r1
 800732c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800733c:	78fa      	ldrb	r2, [r7, #3]
 800733e:	4611      	mov	r1, r2
 8007340:	4618      	mov	r0, r3
 8007342:	f7fa fdf9 	bl	8001f38 <HAL_PCD_EP_ClrStall>
 8007346:	4603      	mov	r3, r0
 8007348:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	4618      	mov	r0, r3
 800734e:	f000 f8f5 	bl	800753c <USBD_Get_USB_Status>
 8007352:	4603      	mov	r3, r0
 8007354:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8007356:	7bbb      	ldrb	r3, [r7, #14]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007372:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007374:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007378:	2b00      	cmp	r3, #0
 800737a:	da0b      	bge.n	8007394 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800737c:	78fb      	ldrb	r3, [r7, #3]
 800737e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007382:	68f9      	ldr	r1, [r7, #12]
 8007384:	4613      	mov	r3, r2
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	1a9b      	subs	r3, r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	440b      	add	r3, r1
 800738e:	333e      	adds	r3, #62	; 0x3e
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	e00b      	b.n	80073ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007394:	78fb      	ldrb	r3, [r7, #3]
 8007396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800739a:	68f9      	ldr	r1, [r7, #12]
 800739c:	4613      	mov	r3, r2
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	1a9b      	subs	r3, r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	440b      	add	r3, r1
 80073a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073d2:	78fa      	ldrb	r2, [r7, #3]
 80073d4:	4611      	mov	r1, r2
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fa fbc6 	bl	8001b68 <HAL_PCD_SetAddress>
 80073dc:	4603      	mov	r3, r0
 80073de:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 f8aa 	bl	800753c <USBD_Get_USB_Status>
 80073e8:	4603      	mov	r3, r0
 80073ea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80073ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b086      	sub	sp, #24
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	607a      	str	r2, [r7, #4]
 8007400:	603b      	str	r3, [r7, #0]
 8007402:	460b      	mov	r3, r1
 8007404:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007414:	7af9      	ldrb	r1, [r7, #11]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	f7fa fcdf 	bl	8001ddc <HAL_PCD_EP_Transmit>
 800741e:	4603      	mov	r3, r0
 8007420:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8007422:	7dfb      	ldrb	r3, [r7, #23]
 8007424:	4618      	mov	r0, r3
 8007426:	f000 f889 	bl	800753c <USBD_Get_USB_Status>
 800742a:	4603      	mov	r3, r0
 800742c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800742e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3718      	adds	r7, #24
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	607a      	str	r2, [r7, #4]
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	460b      	mov	r3, r1
 8007446:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007456:	7af9      	ldrb	r1, [r7, #11]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	f7fa fc5b 	bl	8001d16 <HAL_PCD_EP_Receive>
 8007460:	4603      	mov	r3, r0
 8007462:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8007464:	7dfb      	ldrb	r3, [r7, #23]
 8007466:	4618      	mov	r0, r3
 8007468:	f000 f868 	bl	800753c <USBD_Get_USB_Status>
 800746c:	4603      	mov	r3, r0
 800746e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8007470:	7dbb      	ldrb	r3, [r7, #22]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b082      	sub	sp, #8
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	460b      	mov	r3, r1
 8007484:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800748c:	78fa      	ldrb	r2, [r7, #3]
 800748e:	4611      	mov	r1, r2
 8007490:	4618      	mov	r0, r3
 8007492:	f7fa fc8b 	bl	8001dac <HAL_PCD_EP_GetRxCount>
 8007496:	4603      	mov	r3, r0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	460b      	mov	r3, r1
 80074aa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80074ac:	78fb      	ldrb	r3, [r7, #3]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <HAL_PCDEx_LPM_Callback+0x18>
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d01f      	beq.n	80074f6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 80074b6:	e03b      	b.n	8007530 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d007      	beq.n	80074d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80074c0:	f7f9 f82e 	bl	8000520 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074c4:	4b1c      	ldr	r3, [pc, #112]	; (8007538 <HAL_PCDEx_LPM_Callback+0x98>)
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	4a1b      	ldr	r2, [pc, #108]	; (8007538 <HAL_PCDEx_LPM_Callback+0x98>)
 80074ca:	f023 0306 	bic.w	r3, r3, #6
 80074ce:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	6812      	ldr	r2, [r2, #0]
 80074de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074e2:	f023 0301 	bic.w	r3, r3, #1
 80074e6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fc25 	bl	8005d3e <USBD_LL_Resume>
    break;
 80074f4:	e01c      	b.n	8007530 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	6812      	ldr	r2, [r2, #0]
 8007504:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007508:	f043 0301 	orr.w	r3, r3, #1
 800750c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007514:	4618      	mov	r0, r3
 8007516:	f7fe fbfd 	bl	8005d14 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d005      	beq.n	800752e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007522:	4b05      	ldr	r3, [pc, #20]	; (8007538 <HAL_PCDEx_LPM_Callback+0x98>)
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	4a04      	ldr	r2, [pc, #16]	; (8007538 <HAL_PCDEx_LPM_Callback+0x98>)
 8007528:	f043 0306 	orr.w	r3, r3, #6
 800752c:	6113      	str	r3, [r2, #16]
    break;   
 800752e:	bf00      	nop
}
 8007530:	bf00      	nop
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	e000ed00 	.word	0xe000ed00

0800753c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800754a:	79fb      	ldrb	r3, [r7, #7]
 800754c:	2b03      	cmp	r3, #3
 800754e:	d817      	bhi.n	8007580 <USBD_Get_USB_Status+0x44>
 8007550:	a201      	add	r2, pc, #4	; (adr r2, 8007558 <USBD_Get_USB_Status+0x1c>)
 8007552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007556:	bf00      	nop
 8007558:	08007569 	.word	0x08007569
 800755c:	0800756f 	.word	0x0800756f
 8007560:	08007575 	.word	0x08007575
 8007564:	0800757b 	.word	0x0800757b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	73fb      	strb	r3, [r7, #15]
    break;
 800756c:	e00b      	b.n	8007586 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800756e:	2303      	movs	r3, #3
 8007570:	73fb      	strb	r3, [r7, #15]
    break;
 8007572:	e008      	b.n	8007586 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007574:	2301      	movs	r3, #1
 8007576:	73fb      	strb	r3, [r7, #15]
    break;
 8007578:	e005      	b.n	8007586 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800757a:	2303      	movs	r3, #3
 800757c:	73fb      	strb	r3, [r7, #15]
    break;
 800757e:	e002      	b.n	8007586 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007580:	2303      	movs	r3, #3
 8007582:	73fb      	strb	r3, [r7, #15]
    break;
 8007584:	bf00      	nop
  }
  return usb_status;
 8007586:	7bfb      	ldrb	r3, [r7, #15]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <__errno>:
 8007594:	4b01      	ldr	r3, [pc, #4]	; (800759c <__errno+0x8>)
 8007596:	6818      	ldr	r0, [r3, #0]
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	20000190 	.word	0x20000190

080075a0 <__libc_init_array>:
 80075a0:	b570      	push	{r4, r5, r6, lr}
 80075a2:	4e0d      	ldr	r6, [pc, #52]	; (80075d8 <__libc_init_array+0x38>)
 80075a4:	4c0d      	ldr	r4, [pc, #52]	; (80075dc <__libc_init_array+0x3c>)
 80075a6:	1ba4      	subs	r4, r4, r6
 80075a8:	10a4      	asrs	r4, r4, #2
 80075aa:	2500      	movs	r5, #0
 80075ac:	42a5      	cmp	r5, r4
 80075ae:	d109      	bne.n	80075c4 <__libc_init_array+0x24>
 80075b0:	4e0b      	ldr	r6, [pc, #44]	; (80075e0 <__libc_init_array+0x40>)
 80075b2:	4c0c      	ldr	r4, [pc, #48]	; (80075e4 <__libc_init_array+0x44>)
 80075b4:	f000 f8ea 	bl	800778c <_init>
 80075b8:	1ba4      	subs	r4, r4, r6
 80075ba:	10a4      	asrs	r4, r4, #2
 80075bc:	2500      	movs	r5, #0
 80075be:	42a5      	cmp	r5, r4
 80075c0:	d105      	bne.n	80075ce <__libc_init_array+0x2e>
 80075c2:	bd70      	pop	{r4, r5, r6, pc}
 80075c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075c8:	4798      	blx	r3
 80075ca:	3501      	adds	r5, #1
 80075cc:	e7ee      	b.n	80075ac <__libc_init_array+0xc>
 80075ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075d2:	4798      	blx	r3
 80075d4:	3501      	adds	r5, #1
 80075d6:	e7f2      	b.n	80075be <__libc_init_array+0x1e>
 80075d8:	08007810 	.word	0x08007810
 80075dc:	08007810 	.word	0x08007810
 80075e0:	08007810 	.word	0x08007810
 80075e4:	08007814 	.word	0x08007814

080075e8 <malloc>:
 80075e8:	4b02      	ldr	r3, [pc, #8]	; (80075f4 <malloc+0xc>)
 80075ea:	4601      	mov	r1, r0
 80075ec:	6818      	ldr	r0, [r3, #0]
 80075ee:	f000 b861 	b.w	80076b4 <_malloc_r>
 80075f2:	bf00      	nop
 80075f4:	20000190 	.word	0x20000190

080075f8 <free>:
 80075f8:	4b02      	ldr	r3, [pc, #8]	; (8007604 <free+0xc>)
 80075fa:	4601      	mov	r1, r0
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	f000 b80b 	b.w	8007618 <_free_r>
 8007602:	bf00      	nop
 8007604:	20000190 	.word	0x20000190

08007608 <memset>:
 8007608:	4402      	add	r2, r0
 800760a:	4603      	mov	r3, r0
 800760c:	4293      	cmp	r3, r2
 800760e:	d100      	bne.n	8007612 <memset+0xa>
 8007610:	4770      	bx	lr
 8007612:	f803 1b01 	strb.w	r1, [r3], #1
 8007616:	e7f9      	b.n	800760c <memset+0x4>

08007618 <_free_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4605      	mov	r5, r0
 800761c:	2900      	cmp	r1, #0
 800761e:	d045      	beq.n	80076ac <_free_r+0x94>
 8007620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007624:	1f0c      	subs	r4, r1, #4
 8007626:	2b00      	cmp	r3, #0
 8007628:	bfb8      	it	lt
 800762a:	18e4      	addlt	r4, r4, r3
 800762c:	f000 f8ac 	bl	8007788 <__malloc_lock>
 8007630:	4a1f      	ldr	r2, [pc, #124]	; (80076b0 <_free_r+0x98>)
 8007632:	6813      	ldr	r3, [r2, #0]
 8007634:	4610      	mov	r0, r2
 8007636:	b933      	cbnz	r3, 8007646 <_free_r+0x2e>
 8007638:	6063      	str	r3, [r4, #4]
 800763a:	6014      	str	r4, [r2, #0]
 800763c:	4628      	mov	r0, r5
 800763e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007642:	f000 b8a2 	b.w	800778a <__malloc_unlock>
 8007646:	42a3      	cmp	r3, r4
 8007648:	d90c      	bls.n	8007664 <_free_r+0x4c>
 800764a:	6821      	ldr	r1, [r4, #0]
 800764c:	1862      	adds	r2, r4, r1
 800764e:	4293      	cmp	r3, r2
 8007650:	bf04      	itt	eq
 8007652:	681a      	ldreq	r2, [r3, #0]
 8007654:	685b      	ldreq	r3, [r3, #4]
 8007656:	6063      	str	r3, [r4, #4]
 8007658:	bf04      	itt	eq
 800765a:	1852      	addeq	r2, r2, r1
 800765c:	6022      	streq	r2, [r4, #0]
 800765e:	6004      	str	r4, [r0, #0]
 8007660:	e7ec      	b.n	800763c <_free_r+0x24>
 8007662:	4613      	mov	r3, r2
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	b10a      	cbz	r2, 800766c <_free_r+0x54>
 8007668:	42a2      	cmp	r2, r4
 800766a:	d9fa      	bls.n	8007662 <_free_r+0x4a>
 800766c:	6819      	ldr	r1, [r3, #0]
 800766e:	1858      	adds	r0, r3, r1
 8007670:	42a0      	cmp	r0, r4
 8007672:	d10b      	bne.n	800768c <_free_r+0x74>
 8007674:	6820      	ldr	r0, [r4, #0]
 8007676:	4401      	add	r1, r0
 8007678:	1858      	adds	r0, r3, r1
 800767a:	4282      	cmp	r2, r0
 800767c:	6019      	str	r1, [r3, #0]
 800767e:	d1dd      	bne.n	800763c <_free_r+0x24>
 8007680:	6810      	ldr	r0, [r2, #0]
 8007682:	6852      	ldr	r2, [r2, #4]
 8007684:	605a      	str	r2, [r3, #4]
 8007686:	4401      	add	r1, r0
 8007688:	6019      	str	r1, [r3, #0]
 800768a:	e7d7      	b.n	800763c <_free_r+0x24>
 800768c:	d902      	bls.n	8007694 <_free_r+0x7c>
 800768e:	230c      	movs	r3, #12
 8007690:	602b      	str	r3, [r5, #0]
 8007692:	e7d3      	b.n	800763c <_free_r+0x24>
 8007694:	6820      	ldr	r0, [r4, #0]
 8007696:	1821      	adds	r1, r4, r0
 8007698:	428a      	cmp	r2, r1
 800769a:	bf04      	itt	eq
 800769c:	6811      	ldreq	r1, [r2, #0]
 800769e:	6852      	ldreq	r2, [r2, #4]
 80076a0:	6062      	str	r2, [r4, #4]
 80076a2:	bf04      	itt	eq
 80076a4:	1809      	addeq	r1, r1, r0
 80076a6:	6021      	streq	r1, [r4, #0]
 80076a8:	605c      	str	r4, [r3, #4]
 80076aa:	e7c7      	b.n	800763c <_free_r+0x24>
 80076ac:	bd38      	pop	{r3, r4, r5, pc}
 80076ae:	bf00      	nop
 80076b0:	20000218 	.word	0x20000218

080076b4 <_malloc_r>:
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	1ccd      	adds	r5, r1, #3
 80076b8:	f025 0503 	bic.w	r5, r5, #3
 80076bc:	3508      	adds	r5, #8
 80076be:	2d0c      	cmp	r5, #12
 80076c0:	bf38      	it	cc
 80076c2:	250c      	movcc	r5, #12
 80076c4:	2d00      	cmp	r5, #0
 80076c6:	4606      	mov	r6, r0
 80076c8:	db01      	blt.n	80076ce <_malloc_r+0x1a>
 80076ca:	42a9      	cmp	r1, r5
 80076cc:	d903      	bls.n	80076d6 <_malloc_r+0x22>
 80076ce:	230c      	movs	r3, #12
 80076d0:	6033      	str	r3, [r6, #0]
 80076d2:	2000      	movs	r0, #0
 80076d4:	bd70      	pop	{r4, r5, r6, pc}
 80076d6:	f000 f857 	bl	8007788 <__malloc_lock>
 80076da:	4a21      	ldr	r2, [pc, #132]	; (8007760 <_malloc_r+0xac>)
 80076dc:	6814      	ldr	r4, [r2, #0]
 80076de:	4621      	mov	r1, r4
 80076e0:	b991      	cbnz	r1, 8007708 <_malloc_r+0x54>
 80076e2:	4c20      	ldr	r4, [pc, #128]	; (8007764 <_malloc_r+0xb0>)
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	b91b      	cbnz	r3, 80076f0 <_malloc_r+0x3c>
 80076e8:	4630      	mov	r0, r6
 80076ea:	f000 f83d 	bl	8007768 <_sbrk_r>
 80076ee:	6020      	str	r0, [r4, #0]
 80076f0:	4629      	mov	r1, r5
 80076f2:	4630      	mov	r0, r6
 80076f4:	f000 f838 	bl	8007768 <_sbrk_r>
 80076f8:	1c43      	adds	r3, r0, #1
 80076fa:	d124      	bne.n	8007746 <_malloc_r+0x92>
 80076fc:	230c      	movs	r3, #12
 80076fe:	6033      	str	r3, [r6, #0]
 8007700:	4630      	mov	r0, r6
 8007702:	f000 f842 	bl	800778a <__malloc_unlock>
 8007706:	e7e4      	b.n	80076d2 <_malloc_r+0x1e>
 8007708:	680b      	ldr	r3, [r1, #0]
 800770a:	1b5b      	subs	r3, r3, r5
 800770c:	d418      	bmi.n	8007740 <_malloc_r+0x8c>
 800770e:	2b0b      	cmp	r3, #11
 8007710:	d90f      	bls.n	8007732 <_malloc_r+0x7e>
 8007712:	600b      	str	r3, [r1, #0]
 8007714:	50cd      	str	r5, [r1, r3]
 8007716:	18cc      	adds	r4, r1, r3
 8007718:	4630      	mov	r0, r6
 800771a:	f000 f836 	bl	800778a <__malloc_unlock>
 800771e:	f104 000b 	add.w	r0, r4, #11
 8007722:	1d23      	adds	r3, r4, #4
 8007724:	f020 0007 	bic.w	r0, r0, #7
 8007728:	1ac3      	subs	r3, r0, r3
 800772a:	d0d3      	beq.n	80076d4 <_malloc_r+0x20>
 800772c:	425a      	negs	r2, r3
 800772e:	50e2      	str	r2, [r4, r3]
 8007730:	e7d0      	b.n	80076d4 <_malloc_r+0x20>
 8007732:	428c      	cmp	r4, r1
 8007734:	684b      	ldr	r3, [r1, #4]
 8007736:	bf16      	itet	ne
 8007738:	6063      	strne	r3, [r4, #4]
 800773a:	6013      	streq	r3, [r2, #0]
 800773c:	460c      	movne	r4, r1
 800773e:	e7eb      	b.n	8007718 <_malloc_r+0x64>
 8007740:	460c      	mov	r4, r1
 8007742:	6849      	ldr	r1, [r1, #4]
 8007744:	e7cc      	b.n	80076e0 <_malloc_r+0x2c>
 8007746:	1cc4      	adds	r4, r0, #3
 8007748:	f024 0403 	bic.w	r4, r4, #3
 800774c:	42a0      	cmp	r0, r4
 800774e:	d005      	beq.n	800775c <_malloc_r+0xa8>
 8007750:	1a21      	subs	r1, r4, r0
 8007752:	4630      	mov	r0, r6
 8007754:	f000 f808 	bl	8007768 <_sbrk_r>
 8007758:	3001      	adds	r0, #1
 800775a:	d0cf      	beq.n	80076fc <_malloc_r+0x48>
 800775c:	6025      	str	r5, [r4, #0]
 800775e:	e7db      	b.n	8007718 <_malloc_r+0x64>
 8007760:	20000218 	.word	0x20000218
 8007764:	2000021c 	.word	0x2000021c

08007768 <_sbrk_r>:
 8007768:	b538      	push	{r3, r4, r5, lr}
 800776a:	4c06      	ldr	r4, [pc, #24]	; (8007784 <_sbrk_r+0x1c>)
 800776c:	2300      	movs	r3, #0
 800776e:	4605      	mov	r5, r0
 8007770:	4608      	mov	r0, r1
 8007772:	6023      	str	r3, [r4, #0]
 8007774:	f7f9 f8e6 	bl	8000944 <_sbrk>
 8007778:	1c43      	adds	r3, r0, #1
 800777a:	d102      	bne.n	8007782 <_sbrk_r+0x1a>
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	b103      	cbz	r3, 8007782 <_sbrk_r+0x1a>
 8007780:	602b      	str	r3, [r5, #0]
 8007782:	bd38      	pop	{r3, r4, r5, pc}
 8007784:	20002950 	.word	0x20002950

08007788 <__malloc_lock>:
 8007788:	4770      	bx	lr

0800778a <__malloc_unlock>:
 800778a:	4770      	bx	lr

0800778c <_init>:
 800778c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778e:	bf00      	nop
 8007790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007792:	bc08      	pop	{r3}
 8007794:	469e      	mov	lr, r3
 8007796:	4770      	bx	lr

08007798 <_fini>:
 8007798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779a:	bf00      	nop
 800779c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800779e:	bc08      	pop	{r3}
 80077a0:	469e      	mov	lr, r3
 80077a2:	4770      	bx	lr
